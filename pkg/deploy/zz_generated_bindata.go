// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/infra/helm.yaml
// manifests/infra/local-storage.yaml
// manifests/opni/nats.yaml
// manifests/opni/nvidia.yaml
// manifests/opni/payload.yaml
// manifests/opni/preprocessing.yaml
// manifests/opni/traefik.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infraHelmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4b\x6b\x23\x31\x0c\xc7\xef\xfe\x14\x62\x8e\x0b\x9e\x6c\x60\x0f\xc1\xb7\x7d\xc0\x5e\x96\x3d\xa4\xd0\x4b\xe9\x41\xe3\xa8\x19\x37\x7e\x21\xdb\x03\xe9\xa7\x2f\x4e\x93\x76\xf2\x98\x92\x12\x9d\x3c\x92\xfc\xff\xcb\x3f\x0d\x46\x73\x4f\x9c\x4c\xf0\x0a\x86\xb9\xd8\x18\xbf\x52\x70\x47\x3c\x18\x4d\x3f\xb5\x0e\xc5\x67\xe1\x28\xe3\x0a\x33\x2a\x01\xe0\xd1\x91\x82\x9e\xac\x93\x3a\xf8\xcc\xc1\x5a\xe2\x7d\x3e\x45\xd4\xa4\x60\x53\x3a\x92\x69\x9b\x32\x39\x21\xa5\x14\x63\x0b\xee\x50\xb7\x58\x72\x1f\xd8\xbc\x60\x36\xc1\xb7\x9b\x45\x6a\x4d\x98\xbd\x9b\xff\xb6\x25\x65\xe2\x65\xb0\x74\x85\x33\x17\x4b\xa9\x96\x25\x60\x34\x7f\x39\x94\xb8\xfb\xac\x89\xe6\x5b\xb3\x3b\x31\xa5\x50\x58\xd3\x59\x61\x20\xee\x8e\x92\xb7\x8d\xfb\xcb\xf8\x95\xf1\xeb\x2b\xa6\x4e\xa5\x7b\x26\x9d\x93\x12\x12\x2e\x22\xff\x32\x68\x0e\x96\x96\xf4\x54\x2d\xcf\x31\x4e\xab\x1d\x98\x7d\xf2\xd4\x33\x28\x18\x63\xfa\x78\xff\x1f\x8a\x36\x6c\x1d\xdd\xf6\x9f\x00\x58\xec\xc8\xee\x97\x81\x31\x5e\x60\x16\x49\xd7\x32\x53\xb4\x46\x63\x52\x30\x17\x00\x89\x2c\xe9\x1c\xf8\xed\xa2\xc3\xac\xfb\x7f\x23\xa5\x09\x2d\x80\x4c\x2e\x5a\xcc\xb4\xbf\x37\x9a\xbc\x86\x3d\x92\x98\x14\x01\x38\x0c\xb5\x3b\x1f\xad\xf0\xff\x04\x80\x1a\x35\x81\xc6\x13\x8f\x2c\xe4\x24\xb2\x43\x18\x87\x6b\x52\xc0\xe8\x75\x4f\x3c\x3b\x69\x54\xc3\xf7\x76\xd1\xfe\x18\xf5\xeb\xe0\x1c\xd6\x15\x3d\x34\x27\xbd\xcd\xa3\x78\x0d\x00\x00\xff\xff\x2a\xe5\xe4\x80\xf8\x03\x00\x00")

func infraHelmYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraHelmYaml,
		"infra/helm.yaml",
	)
}

func infraHelmYaml() (*asset, error) {
	bytes, err := infraHelmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra/helm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraLocalStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xa6\x6a\x2e\x2d\x96\x76\xdc\x1e\xd2\x72\xd1\x83\x37\x76\xb6\x01\x12\xdb\x88\xd3\xf6\x10\x2c\x0c\x8a\x1a\xdb\xdc\x50\x24\x41\x52\xce\x7a\xd3\xbc\x7b\x41\x51\x76\x24\xc7\x49\x1c\xb4\xbd\xad\x2e\x02\x87\xf3\xcd\xff\x0f\x99\x11\x7f\xa2\x75\x42\x2b\x0a\xab\x5e\x72\x2b\x54\x4e\x61\x8a\x76\x25\x38\xf6\x39\xd7\xa5\xf2\x49\x81\x9e\xe5\xcc\x33\x9a\x00\x28\x56\x20\x05\xa9\x39\x93\xc4\x30\xbf\x24\xc6\xea\x95\x08\x78\xb4\xc4\x45\x1c\x61\x35\x30\xb2\x3b\xc3\x38\x52\xb8\x2d\x33\x24\x6e\xed\x3c\x16\x09\x21\x24\x69\x6a\xb6\x19\xe3\x1d\x56\xfa\xa5\xb6\xe2\x2b\xf3\x42\xab\xce\xed\x2f\xae\x23\x74\x77\xd5\xcb\xd0\xb3\x8d\x61\xa7\xb2\x74\x1e\xed\x95\x96\x78\xb8\x55\x36\x70\xdb\x52\xa2\xa3\x09\x01\x66\xc4\x47\xab\x4b\xe3\x28\xdc\xa4\xe9\xa7\x04\xc0\xa2\xd3\xa5\xe5\x58\x51\x94\xce\xd1\xa5\xef\x20\x35\xc1\x36\xe7\x51\xf9\x95\x96\x65\x81\x5c\x32\x51\x54\x37\x5c\xab\xb9\x58\x14\xcc\xb8\x0a\xbe\x42\x9b\x55\xd0\x05\xfa\x70\x2d\x85\xab\xfe\x77\xcc\xf3\x65\xfa\xe9\x75\x95\xa8\x72\xa3\x85\xf2\x7b\xd5\x46\xa2\xce\x77\x74\xfd\x78\x90\xe0\x15\x06\xa9\x2d\x20\xb7\xc8\x3c\x56\x42\xf7\xdb\xe7\xbc\xb6\x6c\x81\x75\xfc\x9f\x0a\xad\xef\xb9\x64\xce\xe1\x81\x11\xf8\xf7\xd9\xfe\x20\x54\x2e\xd4\xe2\xf0\xa4\x67\x42\xe5\x49\xc8\xfc\x15\xce\x03\xf3\xc6\xc7\x17\xb4\x27\x00\x4f\xab\xec\x90\xda\x72\x65\xf6\x19\xb9\xaf\xca\x6b\x6f\x03\xfd\x5f\x6d\xc3\x8c\x71\xdd\x6d\xd7\x0e\xd0\x48\xbd\x2e\xf0\x0d\x1d\xfb\xbc\x2a\x67\x90\xd3\x2a\xf7\x46\x0a\xce\x1c\x85\x5e\x02\xe0\x50\x22\xf7\xda\x86\x1b\x80\x22\xe4\xf7\x82\x65\x28\x5d\x24\x84\x30\x9b\x17\x74\x79\x2c\x8c\x64\x1e\x6b\x78\xc3\xc8\xf0\xc9\x96\xa4\xd7\x64\x01\x6c\x4c\x0c\x9f\xb1\x42\x5b\xe1\xd7\xa7\xa1\x2c\x47\x95\xc7\x69\xf4\x84\x84\x8e\x26\xdc\x0a\x2f\x38\x93\x69\xcd\xef\x5a\x09\x1a\xbd\x2d\x3b\xe1\xf3\x5a\xa2\xad\xaa\xa7\x61\x31\x00\x81\x5b\x5c\x53\x48\x4f\x6b\x7d\xfd\x3c\xd7\xca\x8d\x95\x5c\xa7\x0d\x2e\x00\x6d\x02\x5a\x5b\x0a\xe9\xf0\x8b\x70\xde\xa5\x7b\x84\x54\x96\x87\x0a\xeb\x84\xcc\x58\x85\x1e\xab\x2e\xe1\x5a\x79\xab\x25\x31\x92\x29\x7c\x83\x5c\x00\x9c\xcf\x91\x7b\x0a\xe9\x48\x4f\xf9\x12\xf3\x52\xe2\x5b\x14\x17\x2c\xf4\xc5\x7f\xa5\x31\xb8\xc1\x84\x42\xbb\x8d\x20\x79\xad\x58\xe3\x27\x0a\xb6\x40\x0a\x96\x29\xbe\x44\xdb\xdd\xcf\x4d\x57\xc7\x9d\xe3\x4e\xef\xd7\x36\x6a\x52\x4a\x39\xd1\x52\xf0\x35\x85\xf3\xf9\x48\xfb\x89\x45\x87\xdb\xac\x06\xa3\x8a\x82\xa9\xfc\x31\xa7\xe4\x35\x6b\x08\x38\xcf\xac\x6f\x9c\x09\x89\x2b\xa2\x41\xea\xa2\xe7\xdd\x48\xad\x7f\x9d\xcf\x4e\xab\x2d\x47\x1c\xf6\x97\xa1\xc0\x5c\x53\x77\x8c\x47\x44\x90\xc8\xd4\x08\x6f\x11\xf8\x27\xcc\x2f\x69\x4b\xc1\x96\x03\xd5\xea\xa9\xb0\xc9\x78\x30\x1b\xf5\x2f\x87\xd3\x49\xff\x74\xd8\x10\xb6\x62\xb2\xc4\x33\xab\x0b\xda\x4a\xe0\x5c\xa0\xcc\xeb\x21\xfa\x84\x1e\x75\x6f\x1a\xb9\xb3\x9d\x25\x49\xd3\xab\x37\x38\x14\xe9\x97\xcc\xb4\xb5\x3d\xa9\x8a\x3a\xbe\xbb\xf3\xb0\xbd\xbb\x1e\x27\xe3\x34\xd2\xab\xe1\xf0\xe2\x6c\x0c\x8b\x42\x29\xed\x9b\x8d\xdd\x5c\x78\x3b\xfd\x20\x1c\xc9\x71\xce\x4a\xe9\x49\x75\x4d\x21\xf5\xb6\xc4\x34\x69\xd6\xe1\xa6\x4e\x03\xa0\xa1\x29\xfa\x5e\xef\xb5\x4b\x9d\x23\x85\xbf\x98\xf0\x67\xda\x9e\x09\xeb\xfc\xa9\x56\xae\x2c\xd0\x26\x36\xbe\x3c\x36\x45\x3b\x40\x89\x1e\x2b\xcf\xeb\x65\xb5\x09\x59\xb2\xf3\x94\x7b\x71\x07\x6c\x0b\xf4\x99\xf1\xbf\x01\x36\x6a\x95\xc2\xdf\xa4\x0a\xc8\x7d\x9d\x9b\x6a\x4c\x84\x0a\xb8\x64\x26\xa5\x37\x35\xf5\x7e\x9b\xb9\xea\x3e\xa5\xe9\x60\x78\xd6\xff\xe3\xe2\x7a\x36\xe9\x5f\xff\x3e\x3b\x1b\x5f\xcd\x46\xe3\xd1\xec\xe2\x7c\x7a\x3d\x1c\xcc\x46\xe3\xc1\x70\x9a\xbe\x7b\xc4\x04\xeb\x5c\x4a\x6f\xd2\xae\x36\xbe\xcb\x84\xae\x5f\x59\xe1\x7b\xa8\xff\xf1\xfc\x50\xed\x23\x1f\x56\x7a\x6d\xd8\xf7\xdf\x75\x33\xa1\xba\x6e\x59\x9d\xee\x96\x42\x22\x2c\xd0\x6b\xe3\x1d\xa4\x05\x75\xd4\xd0\x14\xb4\x89\xad\x9a\xeb\xc7\x9e\x67\x0e\xe1\x48\x1b\x0f\x42\xb5\xea\xce\xfc\xd0\x3a\xb2\xcc\x69\x59\xfa\xca\xe7\xdf\x8e\xc6\x93\xeb\xfe\xd5\xc7\x16\xc3\xfb\xf7\xad\xa3\x6b\xc3\x9d\xf8\x8a\xe7\xea\xc3\xda\xa3\x3b\x04\x5d\xb4\xd1\x2b\x2d\x43\x95\xbc\x86\x44\xc7\x78\xed\x9f\x8a\x9d\x55\xdc\xe6\xc2\x02\x29\xe0\xf8\xe4\xe4\x04\x88\x81\xa3\xfb\xa6\x23\x0f\xd5\x5e\x66\x36\xd7\x77\xea\x5b\x24\x5f\x8c\xa4\x2d\x80\xd8\xf9\x9e\xf8\x2d\x51\x1a\xb4\x13\x9d\x77\xd6\xac\x90\xdb\x28\xee\x34\x64\x20\xc5\x9e\x9d\xe8\x7c\xef\x0b\x28\xb6\x69\x94\x46\x4c\xcd\xd4\x7c\xe6\x3c\xbf\x32\x77\x40\xb0\x67\x4d\x8a\xcc\x32\xbb\x26\x59\xe9\xd6\x99\xfe\x42\x7b\x9d\x9f\x7f\xea\xf4\x92\x7f\x02\x00\x00\xff\xff\xd5\xf6\xe3\x1f\x01\x0e\x00\x00")

func infraLocalStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraLocalStorageYaml,
		"infra/local-storage.yaml",
	)
}

func infraLocalStorageYaml() (*asset, error) {
	bytes, err := infraLocalStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra/local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xbf\x4e\x33\x41\x0c\x04\xf0\x7e\x9f\xc2\x4a\xff\xed\x25\xfa\x20\x80\x3b\x94\x86\x92\x02\xd2\xcf\xed\x19\xdd\x2a\xfb\x4f\x6b\x1f\x24\x6f\x8f\x2e\x89\x44\x67\xcf\x6f\x06\x2d\x1e\xa5\x6b\xac\x85\x69\x96\x94\x7d\x80\x59\x12\x1f\xeb\xf0\xbd\x73\xa7\x58\x26\xa6\x37\x49\xf9\x30\xa3\x9b\xcb\x62\x98\x60\x60\x47\x54\x90\x85\xa9\xc0\x94\xee\x9f\x36\x04\x61\x3a\x2d\xa3\xfc\xd3\x8b\x9a\x64\xa7\x4d\xc2\x5a\x0e\xeb\xfc\xd6\x76\x44\x5d\x5a\x65\x9a\xcd\x9a\xf2\x30\x5c\x4d\xfd\x18\xad\x20\x47\x1f\x6a\x1e\xee\xb7\x23\x52\xb1\x75\x4f\x84\xc5\x66\x2f\x05\x63\x92\x89\x69\x63\x7d\x91\xcd\x1f\x34\xa8\xfe\xd4\xbe\xca\xf1\xeb\x73\xff\x11\x5e\xd3\xcb\xf9\xe6\x5d\x5a\x8a\x01\x87\xba\x14\x63\xfa\x7f\xcd\x32\xce\xef\xb8\xa4\x8a\x89\x69\xb7\x7d\x78\x7e\x7c\xda\x6f\x7f\x03\x00\x00\xff\xff\x1d\x18\x37\xad\x0a\x01\x00\x00")

func opniNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniNatsYaml,
		"opni/nats.yaml",
	)
}

func opniNatsYaml() (*asset, error) {
	bytes, err := opniNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni/nats.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniNvidiaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xc1\x8e\xdb\x36\x10\xbd\xeb\x2b\x1e\xec\x4b\x02\xac\xa4\x4d\x0e\x45\xab\x9c\xdc\xdd\x2d\x6a\x64\x63\x07\xeb\x4d\x82\xa0\xe8\x61\x4c\x8e\x25\xc2\x14\xc9\x92\x94\xbd\xfa\xfb\x82\xb2\xec\x5d\xa5\x40\x93\x53\x81\xea\x62\x43\x9c\x37\xf3\xe6\xcd\x1b\x6a\x8e\x1b\xeb\x7a\xaf\xea\x26\xe2\x95\x78\x8d\xb7\xd7\x6f\x7e\xb9\xc2\xea\xf3\xf2\x76\xb9\xc0\xcd\xfa\xe1\xe3\xfa\x61\xf1\xb8\x5c\xaf\x0a\x60\xa1\x35\x86\xc0\x00\xcf\x81\xfd\x81\x65\x91\xcd\xb3\x39\xee\x95\x60\x13\x58\xa2\x33\x92\x3d\x62\xc3\x58\x38\x12\x0d\x9f\x4f\xae\xf0\x99\x7d\x50\xd6\xe0\x6d\x71\x8d\x57\x29\x60\x36\x1e\xcd\x5e\xbf\xcb\xe6\xe8\x6d\x87\x96\x7a\x18\x1b\xd1\x05\x46\x6c\x54\xc0\x4e\x69\x06\x3f\x09\x76\x11\xca\x40\xd8\xd6\x69\x45\x46\x30\x8e\x2a\x36\x43\x99\x31\x49\x91\xcd\xf1\x75\x4c\x61\xb7\x91\x94\x01\x41\x58\xd7\xc3\xee\x5e\xc6\x81\xe2\x40\x38\x3d\x4d\x8c\xae\x2a\xcb\xe3\xf1\x58\xd0\x40\xb6\xb0\xbe\x2e\xf5\x29\x30\x94\xf7\xcb\x9b\xbb\xd5\xe6\x2e\x7f\x5b\x5c\x0f\x90\x4f\x46\x73\x48\x8d\xff\xd5\x29\xcf\x12\xdb\x1e\xe4\x9c\x56\x82\xb6\x9a\xa1\xe9\x08\xeb\x41\xb5\x67\x96\x88\x36\xf1\x3d\x7a\x15\x95\xa9\xaf\x10\xec\x2e\x1e\xc9\x73\x36\x87\x54\x21\x7a\xb5\xed\xe2\x44\xac\x33\x3b\x15\x26\x01\xd6\x80\x0c\x66\x8b\x0d\x96\x9b\x19\x7e\x5d\x6c\x96\x9b\xab\x6c\x8e\x2f\xcb\xc7\xdf\xd7\x9f\x1e\xf1\x65\xf1\xf0\xb0\x58\x3d\x2e\xef\x36\x58\x3f\xe0\x66\xbd\xba\x5d\xa6\x41\x6d\xb0\xfe\x0d\x8b\xd5\x57\xbc\x5f\xae\x6e\xaf\xc0\x2a\x36\xec\xc1\x4f\xce\x27\xfe\xd6\x43\x25\x19\x87\xd1\x61\xc3\x3c\x21\xb0\xb3\x27\x42\xc1\xb1\x50\x3b\x25\xa0\xc9\xd4\x1d\xd5\x8c\xda\x1e\xd8\x1b\x65\x6a\x38\xf6\xad\x0a\x69\x98\x01\x64\x64\x36\x87\x56\xad\x8a\x14\x87\x37\xff\x68\xaa\xc8\x32\x72\x6a\x1c\x7f\x95\x34\x0b\xe5\xe1\x4d\xb6\x57\x46\x56\xb8\x25\x6e\xad\xd9\x70\xcc\x5a\x8e\x24\x29\x52\x95\x01\x86\x5a\xae\x60\x0e\x4a\x2a\xca\x25\x1f\x94\xe0\xdc\xe9\xae\x56\x26\x97\x03\x20\x70\x1c\xc3\x82\x23\xc1\x15\xf6\xdd\x96\xf3\xd0\x87\xc8\x6d\x96\xb8\xa7\x2c\x81\x35\x8b\x68\x7d\xfa\x0f\xb4\x14\x45\x73\x4f\x5b\xd6\xe1\xf4\xe2\xdf\xcb\x84\x0c\xe8\x9c\xa4\xc8\x9b\xe8\x29\x72\xdd\x9f\x50\xb1\x77\x5c\xe1\xc1\x6a\xad\x4c\xfd\x69\x08\xc8\x80\xc8\xad\xd3\x14\x79\x2c\xf5\xa2\x95\xf4\xcc\xf1\x98\xdc\x4c\xc6\xd8\x93\x4a\xc3\x9c\xd9\x79\x16\x14\x59\x16\x78\x9f\x0c\xde\xb0\x3f\xe9\xbf\x25\xb1\x3f\x92\x97\x83\xdf\x29\xaa\xad\xd2\x2a\xf6\x97\x5c\x69\x64\xc9\xba\xa1\x2a\xcb\xd4\xb6\x37\x1c\x39\x14\xca\x96\xd2\x8a\x50\x46\x0a\xfb\x50\x92\x6c\x95\x51\x21\xb2\xcf\x85\xee\xd2\x6f\x59\x77\xe4\xc9\x44\x66\x99\x07\xd1\xb0\xec\x52\x07\xb9\x48\x1e\x15\xa4\x73\x92\xd2\x9a\xdc\x59\x19\xca\xb1\xd4\x33\xdf\x8b\x62\xc0\x08\x65\x5f\x90\x76\x0d\x15\x53\x06\x97\x6c\xce\xca\x0a\xb3\xd9\x08\xd3\x13\xd9\xbf\x2f\x3c\x70\x9e\xe1\x20\xb9\xd5\xec\xa7\x3c\x46\x45\x9f\x4f\xfe\x1f\x8a\xe6\xd8\x73\x5f\xe1\x66\x8c\x58\xa4\x80\xb0\x36\xba\xbf\x28\x63\x5d\x6a\xc8\xfa\x0a\x77\x4f\x2a\xc4\x30\x05\x9e\x14\x2b\x84\x6d\xcb\xda\x75\xdf\x03\x01\xbc\xdb\xb1\x88\x15\x56\x76\x33\x8e\xed\xd2\xf3\x07\xf2\xfb\xd3\x25\xeb\xac\x04\x85\x74\x5d\x8e\xb4\x40\x52\xe6\xd6\xbc\xc3\xb1\x61\x03\x36\xe9\x7e\x93\x57\xc3\x4a\x7f\x13\x72\xc9\x76\x71\xc5\xf9\xbb\x30\x7c\x20\x6c\xe7\x05\x87\x61\x02\xdf\x00\x53\xd1\x80\x60\x11\x1b\x8a\x29\x73\x0f\x41\xcf\xe9\xb6\x9c\xe0\x63\x4e\x09\xda\x45\xf6\x20\xec\x48\xe9\xce\x73\xf1\xdf\x0f\xce\x79\x65\xbd\x8a\xfd\x8d\xa6\x10\x56\x83\x7b\x67\xa7\xdb\x26\x37\x56\xf2\x05\x7a\x36\xbc\xb0\x26\x7d\x83\xd8\x5f\x1c\x9b\x43\xb5\x54\x5f\x5c\x5f\xee\x7f\x0e\x53\xe7\x57\x6f\x8a\xeb\xe2\x3a\xdf\x72\xa4\x9f\x7e\x64\x51\x44\xf4\xcf\x4b\xc9\xa2\x1b\xe8\x59\x13\xf9\x29\x3e\x2f\x1a\x40\x5a\xdb\xe3\x47\xaf\x0e\x4a\x73\xcd\x77\x41\x90\x1e\x16\xa6\xc2\x8e\x74\xe0\x17\x91\x82\x1c\x0d\x8b\xa1\x38\xbc\xcc\x00\x48\x6f\x5d\x85\x3f\x66\x8b\xfb\xfb\xd9\x9f\x97\x93\x83\xd5\x5d\xcb\x1f\x6c\x67\xe2\x24\x3e\x1f\x59\x4f\xe8\x4e\xf2\xb5\x09\xf3\x91\x62\x53\xa1\x3c\x90\x2f\xb5\xda\x0e\xe3\xd3\x1c\xcb\x09\xea\xec\xe4\x53\xa9\x17\x55\xbe\x57\xa3\xb1\xe1\x54\x60\x52\xd7\xfd\x48\xc9\xbf\x03\x00\x00\xff\xff\x9d\xf6\x8e\x74\x0f\x09\x00\x00")

func opniNvidiaYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniNvidiaYaml,
		"opni/nvidia.yaml",
	)
}

func opniNvidiaYaml() (*asset, error) {
	bytes, err := opniNvidiaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni/nvidia.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniPayloadYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\x15\xaf\xc1\x30\x6c\x3a\x2d\xc0\x7a\x18\x50\x14\x41\xd2\xe6\x1a\x30\x32\xd3\x68\x91\x65\x41\xa4\xbd\xfa\xef\x07\xd5\xb6\xea\x62\x68\xd3\xf2\x12\x85\x7a\x24\xdf\xa3\x9f\x30\xd8\x1d\x45\xb6\x8d\xd7\xd0\x5d\x17\x67\xeb\x2b\x0d\x5b\x8a\x9d\x35\x54\xd4\x24\x58\xa1\xa0\x2e\x00\x3c\xd6\xa4\x21\x60\xef\x1a\xac\x54\x24\x43\xb6\xa3\xa8\x78\x84\x02\x38\x3c\x90\xe3\x04\x05\x18\xb3\xef\xe0\x39\x90\x49\x58\x26\x47\x46\x9a\x38\xd4\x61\x08\xef\xce\x08\x4d\x94\xe7\x11\xea\xf9\xa8\xe1\xfb\x97\x42\x29\x55\xcc\x55\x60\x08\x5c\x66\x29\xbf\x28\xb8\xa6\xaf\xc9\xcb\x67\xd4\x4c\xec\x22\x05\x67\x0d\xb2\x86\xeb\xff\xb8\xd6\x28\xe6\x74\x3b\x13\x7d\x99\xbe\x50\x1d\x1c\x0a\x8d\x0d\x66\x7c\x52\xb8\x57\xbd\x2e\x77\x03\x98\x68\xa6\x30\x8d\x17\xb4\x9e\x62\xee\xa0\x2e\x7f\xb3\x21\x6c\x8d\x8f\xa4\x81\xd1\xff\xc1\x3e\xa2\x37\x27\x8a\xe5\x5b\x55\x3a\x09\x60\x79\x5d\xbc\x6e\x9d\x5b\x37\xce\x9a\x5e\xc3\xca\xfd\xc5\x9e\xf3\x3d\xf9\xee\x45\xd2\x44\xe9\x6e\x75\xbf\xdd\x6f\x6f\x36\xbb\x9b\xcd\xfe\x61\x73\x9b\xef\x01\x3a\x74\x2d\x69\xb8\xf2\x28\xac\xcb\x32\xfd\xec\x8d\xb3\xe4\x45\xef\x8e\x0f\xdf\xee\xcd\xca\xfd\x78\xfa\x99\xd2\x6a\x48\x2f\xce\xed\x81\x14\xf7\x2c\x54\x2f\xb8\x33\xfa\xeb\x72\xb9\xbc\xca\x1d\xb3\x63\x26\x02\x79\x4f\xeb\xb7\x0c\x44\x4f\x42\x3e\x1d\x93\x8d\x0e\x24\x38\x79\xe9\xb7\x7f\x8c\xc4\xfc\x09\x23\x29\x3b\x96\x0c\x40\x0e\x98\x1e\x45\x45\x47\x6c\x5d\x5a\x21\x7a\xdf\x08\x4a\x9a\x35\x70\x4c\x62\xa2\x27\x21\x5e\xd8\xa6\x1c\xab\x17\xc6\x21\xb3\x06\x89\x48\x47\x7b\x7e\x71\x67\xeb\x68\x7c\x0d\x27\x91\x30\xa9\x0c\x28\xa7\x99\x09\xd2\x5f\x0d\x65\x5e\xc1\x01\xcd\x99\x7c\xa5\x67\x4b\x1f\xd9\xde\x7d\xcc\x2e\x19\x3f\x6d\xf0\x5f\x00\x00\x00\xff\xff\x54\x48\x2e\x00\x44\x04\x00\x00")

func opniPayloadYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniPayloadYaml,
		"opni/payload.yaml",
	)
}

func opniPayloadYaml() (*asset, error) {
	bytes, err := opniPayloadYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni/payload.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniPreprocessingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xcd\xee\xd3\x30\x10\xc4\xef\x79\x8a\x55\xef\xf9\xf8\x47\x08\xa9\x3e\x51\xa9\x39\x20\x55\xa5\xea\xd7\x35\xda\xba\x4b\x6b\xba\xb1\x2d\xaf\x13\xc8\xdb\x23\xab\xa4\x50\x28\xb0\x17\x4b\xbb\x9e\xf9\xcd\xa0\x37\x47\x0a\x62\x9c\x55\x80\xde\x4b\x39\xbc\x65\x37\x63\xcf\x0a\x96\xe4\xd9\x8d\x1d\xd9\x98\x75\x14\xf1\x8c\x11\x55\x06\x60\xb1\x23\x05\x3e\x90\x0f\x4e\x93\x88\xb1\x97\x5c\x28\x0c\x46\x53\x26\x9e\x74\xfa\x13\xc8\xb3\xd1\x28\x0a\xde\x32\x00\x21\x26\x1d\x5d\x48\x17\x80\x0e\xa3\xbe\xae\xf0\x44\x2c\xf7\x05\x24\xee\xdf\x1c\x01\x22\x75\x9e\x31\xd2\x0f\xf5\x2f\x49\xd2\xf0\x93\xd1\x7f\xac\x00\xa6\x80\x69\xb4\xb3\x11\x8d\xa5\xf0\x90\xe7\xff\x2c\x37\x21\x4c\x87\x17\x52\x20\x68\xbf\xe0\x18\xd0\xea\x2b\x85\xf2\xa5\x44\x0d\x55\x51\x3d\xeb\x36\x3d\xf3\xc6\xb1\xd1\xa3\x82\x05\x7f\xc5\x51\x1e\x77\xb2\xc3\xcf\x1e\x53\x94\xf5\x62\xbf\x6b\x77\xcd\xf6\xd8\x6c\xdb\xc3\x76\xf5\xb8\x03\x0c\xc8\x3d\x29\x98\x59\x8c\xa2\xca\x32\x3d\xad\x66\x43\x36\xaa\xe3\xe7\xc3\xfb\xbd\x5e\xf0\xfc\xdb\x87\xb4\xce\xef\xeb\xe2\xd6\x9f\x28\x97\x51\x22\x75\x85\x0c\x5a\xbd\xab\xeb\x7a\xf6\x07\xb1\xd9\xb5\xcd\x7a\xb9\xf9\xf4\x71\xbd\x7f\x41\xbb\xc6\xe8\x13\xce\x79\xb2\x67\x23\x31\xb8\x9c\x26\xc0\x54\xfb\x77\x50\xa1\xb9\x97\x48\xa1\x60\xa7\x91\xd5\xbc\xae\xaa\xd9\xf7\x00\x00\x00\xff\xff\x78\xa4\xf4\x1a\x77\x02\x00\x00")

func opniPreprocessingYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniPreprocessingYaml,
		"opni/preprocessing.yaml",
	)
}

func opniPreprocessingYaml() (*asset, error) {
	bytes, err := opniPreprocessingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni/preprocessing.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniTraefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x4e\xc6\x30\x0c\x84\xf7\x3c\x85\xd5\x9d\x54\x15\x0b\x78\x65\xe1\x09\xd8\xdd\xf4\x50\xa3\x26\x69\x14\xbb\x95\x78\x7b\x94\xaa\xf0\x4b\xff\x7a\x77\xfe\x3e\x4b\x8d\x5f\x68\x1a\xf7\xc2\xb4\x22\x65\x1f\xc4\x2c\xc1\xc7\x7d\x3c\x27\xb7\xc5\xb2\x30\x7d\x22\xe5\x8f\x55\x9a\xb9\x0c\x93\x45\x4c\xd8\x11\x15\xc9\x60\xb2\x26\xf8\x8e\x1b\xdd\x81\x56\x09\x60\xda\x8e\x19\x2f\xfa\xa3\x86\xec\xb4\x22\xf4\x7d\xe8\x84\xff\x03\x47\xd4\x50\x77\xa6\xd5\xac\x2a\x8f\xe3\x25\xbf\xcb\x6e\x7f\xec\xce\xbf\xff\xce\x77\x3f\xbd\xf9\x57\x47\xa4\xb0\x8e\x24\x6a\xb3\x04\x8f\x22\x73\xc2\xc2\x34\x58\x3b\x30\x5c\x85\x6a\x7a\xce\x7f\x03\x00\x00\xff\xff\xf9\xd9\x25\x16\xeb\x00\x00\x00")

func opniTraefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniTraefikYaml,
		"opni/traefik.yaml",
	)
}

func opniTraefikYaml() (*asset, error) {
	bytes, err := opniTraefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni/traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infra/helm.yaml":          infraHelmYaml,
	"infra/local-storage.yaml": infraLocalStorageYaml,
	"opni/nats.yaml":           opniNatsYaml,
	"opni/nvidia.yaml":         opniNvidiaYaml,
	"opni/payload.yaml":        opniPayloadYaml,
	"opni/preprocessing.yaml":  opniPreprocessingYaml,
	"opni/traefik.yaml":        opniTraefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infra": &bintree{nil, map[string]*bintree{
		"helm.yaml":          &bintree{infraHelmYaml, map[string]*bintree{}},
		"local-storage.yaml": &bintree{infraLocalStorageYaml, map[string]*bintree{}},
	}},
	"opni": &bintree{nil, map[string]*bintree{
		"nats.yaml":          &bintree{opniNatsYaml, map[string]*bintree{}},
		"nvidia.yaml":        &bintree{opniNvidiaYaml, map[string]*bintree{}},
		"payload.yaml":       &bintree{opniPayloadYaml, map[string]*bintree{}},
		"preprocessing.yaml": &bintree{opniPreprocessingYaml, map[string]*bintree{}},
		"traefik.yaml":       &bintree{opniTraefikYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
