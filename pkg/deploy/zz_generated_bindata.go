// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/infra-stack/helm-controller.yaml
// manifests/infra-stack/local-path-provisioner.yaml
// manifests/infra-stack/namespace.yaml
// manifests/opni-stack/minio.yaml
// manifests/opni-stack/nats.yaml
// manifests/opni-stack/opendistro-es.yaml
// manifests/opni-stack/rancher-logging.yaml
// manifests/opni-stack/traefik.yaml
// manifests/services/drain-service.yaml
// manifests/services/log-output.yaml
// manifests/services/nulog-inference-service-control-plane.yaml
// manifests/services/nulog-inference-service.yaml
// manifests/services/nvidia-plugin.yaml
// manifests/services/payload-receiver-service.yaml
// manifests/services/preprocessing.yaml
// manifests/services/training-controller.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infraStackHelmControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x3f\x8f\x13\x31\x10\xc5\x7b\x7f\x8a\x51\x4a\x24\x6f\x88\x44\x71\x72\xc7\x1f\x89\x06\x51\x1c\x12\x0d\xa2\x98\x75\x1e\x17\x13\xff\xd3\xd8\x5e\xe9\xf8\xf4\xc8\x21\x8b\x36\xc9\x2d\x3a\x04\x53\x79\x67\xc6\x6f\xde\xfe\xc6\x5a\x6b\xc5\xd9\x7d\x86\x14\x97\xa2\xa1\x69\xa7\x8e\x2e\xee\x0d\x7d\x82\x4c\xce\xe2\xb5\xb5\xa9\xc5\xaa\x02\x2a\xef\xb9\xb2\x51\x44\x91\x03\x0c\x1d\xe0\x83\xb6\x29\x56\x49\xde\x43\xce\xf9\x92\xd9\xc2\xd0\xb1\x8d\xd0\xe5\xb1\x54\x04\x75\x3d\x42\x46\xb6\x03\xb7\x7a\x48\xe2\x7e\x70\x75\x29\x0e\xc7\xbb\x32\xb8\xb4\x9d\x76\x23\x2a\xcf\x0e\xde\xfa\x56\x2a\xe4\x3e\x79\x3c\x63\xbc\x34\x8f\xd2\xcb\x9a\x38\xbb\xf7\x92\x5a\x3e\x7d\xf6\xc4\xe6\xc5\xe6\x74\x12\x94\xd4\xc4\xe2\xa6\x30\x41\xc6\x8b\xe4\x7f\xf0\xfc\xc6\xc5\xbd\x8b\x0f\xcf\xb0\x5e\xda\xf8\x1d\xb6\x16\xa3\x34\x3d\x09\xff\xaf\x91\x4b\xf2\xb8\xc7\xb7\x3e\xf2\x96\xe5\xba\xda\x0c\xee\x0f\xff\x7b\x43\x86\x73\x2e\xdb\xdf\xaf\xe6\x1d\xb2\x4f\x8f\x01\xff\xf6\x62\x88\x3c\x8f\xf0\xe7\x8d\x70\xce\x4f\x30\xcb\xb0\xbd\x2c\xc8\xde\x59\x2e\x86\x76\x8a\xa8\xc0\xc3\xd6\x24\xbf\x2e\x06\xae\xf6\xf0\x61\xa1\xb4\xa2\x45\x54\x11\xb2\xe7\x8a\xf3\xbd\x85\xf3\x1e\xfe\x42\x62\x55\x84\x68\x36\x75\x3a\x5f\xac\xf0\xe3\x0a\x80\x1e\x3d\xc1\x2e\x42\x16\x23\xf4\x2a\xb2\x39\x5c\xe0\x07\x18\x12\x8e\xf6\x00\xd9\x5e\x35\x9a\xe9\xe5\x70\x37\xbc\x5a\xf4\xdb\x14\x02\xf7\x15\x7d\xd9\x5c\xf5\x6e\xbe\xaa\x9f\x01\x00\x00\xff\xff\xc3\xc4\x36\x41\x06\x04\x00\x00")

func infraStackHelmControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackHelmControllerYaml,
		"infra-stack/helm-controller.yaml",
	)
}

func infraStackHelmControllerYaml() (*asset, error) {
	bytes, err := infraStackHelmControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/helm-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraStackLocalPathProvisionerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xa6\x6a\x2e\x2d\x96\x76\xdc\x1e\xd2\x72\xd1\x83\x37\x76\xb6\x01\x12\xdb\x88\xd3\xf6\x10\x2c\x0c\x8a\x1a\xdb\xdc\x50\x24\x41\x52\xce\x7a\xd3\xbc\x7b\x41\x51\x76\x24\xc7\x49\x1c\xb4\xbd\xad\x2e\x02\x87\xf3\xcd\xff\x0f\x99\x11\x7f\xa2\x75\x42\x2b\x0a\xab\x5e\x72\x2b\x54\x4e\x61\x8a\x76\x25\x38\xf6\x39\xd7\xa5\xf2\x49\x81\x9e\xe5\xcc\x33\x9a\x00\x28\x56\x20\x05\xa9\x39\x93\xc4\x30\xbf\x24\xc6\xea\x95\x08\x78\xb4\xc4\x45\x1c\x61\x35\x30\xb2\x3b\xc3\x38\x52\xb8\x2d\x33\x24\x6e\xed\x3c\x16\x09\x21\x24\x69\x6a\xb6\x19\xe3\x1d\x56\xfa\xa5\xb6\xe2\x2b\xf3\x42\xab\xce\xed\x2f\xae\x23\x74\x77\xd5\xcb\xd0\xb3\x8d\x61\xa7\xb2\x74\x1e\xed\x95\x96\x78\xb8\x55\x36\x70\xdb\x52\xa2\xa3\x09\x01\x66\xc4\x47\xab\x4b\xe3\x28\xdc\xa4\xe9\xa7\x04\xc0\xa2\xd3\xa5\xe5\x58\x51\x94\xce\xd1\xa5\xef\x20\x35\xc1\x36\xe7\x51\xf9\x95\x96\x65\x81\x5c\x32\x51\x54\x37\x5c\xab\xb9\x58\x14\xcc\xb8\x0a\xbe\x42\x9b\x55\xd0\x05\xfa\x70\x2d\x85\xab\xfe\x77\xcc\xf3\x65\xfa\xe9\x75\x95\xa8\x72\xa3\x85\xf2\x7b\xd5\x46\xa2\xce\x77\x74\xfd\x78\x90\xe0\x15\x06\xa9\x2d\x20\xb7\xc8\x3c\x56\x42\xf7\xdb\xe7\xbc\xb6\x6c\x81\x75\xfc\x9f\x0a\xad\xef\xb9\x64\xce\xe1\x81\x11\xf8\xf7\xd9\xfe\x20\x54\x2e\xd4\xe2\xf0\xa4\x67\x42\xe5\x49\xc8\xfc\x15\xce\x03\xf3\xc6\xc7\x17\xb4\x27\x00\x4f\xab\xec\x90\xda\x72\x65\xf6\x19\xb9\xaf\xca\x6b\x6f\x03\xfd\x5f\x6d\xc3\x8c\x71\xdd\x6d\xd7\x0e\xd0\x48\xbd\x2e\xf0\x0d\x1d\xfb\xbc\x2a\x67\x90\xd3\x2a\xf7\x46\x0a\xce\x1c\x85\x5e\x02\xe0\x50\x22\xf7\xda\x86\x1b\x80\x22\xe4\xf7\x82\x65\x28\x5d\x24\x84\x30\x9b\x17\x74\x79\x2c\x8c\x64\x1e\x6b\x78\xc3\xc8\xf0\xc9\x96\xa4\xd7\x64\x01\x6c\x4c\x0c\x9f\xb1\x42\x5b\xe1\xd7\xa7\xa1\x2c\x47\x95\xc7\x69\xf4\x84\x84\x8e\x26\xdc\x0a\x2f\x38\x93\x69\xcd\xef\x5a\x09\x1a\xbd\x2d\x3b\xe1\xf3\x5a\xa2\xad\xaa\xa7\x61\x31\x00\x81\x5b\x5c\x53\x48\x4f\x6b\x7d\xfd\x3c\xd7\xca\x8d\x95\x5c\xa7\x0d\x2e\x00\x6d\x02\x5a\x5b\x0a\xe9\xf0\x8b\x70\xde\xa5\x7b\x84\x54\x96\x87\x0a\xeb\x84\xcc\x58\x85\x1e\xab\x2e\xe1\x5a\x79\xab\x25\x31\x92\x29\x7c\x83\x5c\x00\x9c\xcf\x91\x7b\x0a\xe9\x48\x4f\xf9\x12\xf3\x52\xe2\x5b\x14\x17\x2c\xf4\xc5\x7f\xa5\x31\xb8\xc1\x84\x42\xbb\x8d\x20\x79\xad\x58\xe3\x27\x0a\xb6\x40\x0a\x96\x29\xbe\x44\xdb\xdd\xcf\x4d\x57\xc7\x9d\xe3\x4e\xef\xd7\x36\x6a\x52\x4a\x39\xd1\x52\xf0\x35\x85\xf3\xf9\x48\xfb\x89\x45\x87\xdb\xac\x06\xa3\x8a\x82\xa9\xfc\x31\xa7\xe4\x35\x6b\x08\x38\xcf\xac\x6f\x9c\x09\x89\x2b\xa2\x41\xea\xa2\xe7\xdd\x48\xad\x7f\x9d\xcf\x4e\xab\x2d\x47\x1c\xf6\x97\xa1\xc0\x5c\x53\x77\x8c\x47\x44\x90\xc8\xd4\x08\x6f\x11\xf8\x27\xcc\x2f\x69\x4b\xc1\x96\x03\xd5\xea\xa9\xb0\xc9\x78\x30\x1b\xf5\x2f\x87\xd3\x49\xff\x74\xd8\x10\xb6\x62\xb2\xc4\x33\xab\x0b\xda\x4a\xe0\x5c\xa0\xcc\xeb\x21\xfa\x84\x1e\x75\x6f\x1a\xb9\xb3\x9d\x25\x49\xd3\xab\x37\x38\x14\xe9\x97\xcc\xb4\xb5\x3d\xa9\x8a\x3a\xbe\xbb\xf3\xb0\xbd\xbb\x1e\x27\xe3\x34\xd2\xab\xe1\xf0\xe2\x6c\x0c\x8b\x42\x29\xed\x9b\x8d\xdd\x5c\x78\x3b\xfd\x20\x1c\xc9\x71\xce\x4a\xe9\x49\x75\x4d\x21\xf5\xb6\xc4\x34\x69\xd6\xe1\xa6\x4e\x03\xa0\xa1\x29\xfa\x5e\xef\xb5\x4b\x9d\x23\x85\xbf\x98\xf0\x67\xda\x9e\x09\xeb\xfc\xa9\x56\xae\x2c\xd0\x26\x36\xbe\x3c\x36\x45\x3b\x40\x89\x1e\x2b\xcf\xeb\x65\xb5\x09\x59\xb2\xf3\x94\x7b\x71\x07\x6c\x0b\xf4\x99\xf1\xbf\x01\x36\x6a\x95\xc2\xdf\xa4\x0a\xc8\x7d\x9d\x9b\x6a\x4c\x84\x0a\xb8\x64\x26\xa5\x37\x35\xf5\x7e\x9b\xb9\xea\x3e\xa5\xe9\x60\x78\xd6\xff\xe3\xe2\x7a\x36\xe9\x5f\xff\x3e\x3b\x1b\x5f\xcd\x46\xe3\xd1\xec\xe2\x7c\x7a\x3d\x1c\xcc\x46\xe3\xc1\x70\x9a\xbe\x7b\xc4\x04\xeb\x5c\x4a\x6f\xd2\xae\x36\xbe\xcb\x84\xae\x5f\x59\xe1\x7b\xa8\xff\xf1\xfc\x50\xed\x23\x1f\x56\x7a\x6d\xd8\xf7\xdf\x75\x33\xa1\xba\x6e\x59\x9d\xee\x96\x42\x22\x2c\xd0\x6b\xe3\x1d\xa4\x05\x75\xd4\xd0\x14\xb4\x89\xad\x9a\xeb\xc7\x9e\x67\x0e\xe1\x48\x1b\x0f\x42\xb5\xea\xce\xfc\xd0\x3a\xb2\xcc\x69\x59\xfa\xca\xe7\xdf\x8e\xc6\x93\xeb\xfe\xd5\xc7\x16\xc3\xfb\xf7\xad\xa3\x6b\xc3\x9d\xf8\x8a\xe7\xea\xc3\xda\xa3\x3b\x04\x5d\xb4\xd1\x2b\x2d\x43\x95\xbc\x86\x44\xc7\x78\xed\x9f\x8a\x9d\x55\xdc\xe6\xc2\x02\x29\xe0\xf8\xe4\xe4\x04\x88\x81\xa3\xfb\xa6\x23\x0f\xd5\x5e\x66\x36\xd7\x77\xea\x5b\x24\x5f\x8c\xa4\x2d\x80\xd8\xf9\x9e\xf8\x2d\x51\x1a\xb4\x13\x9d\x77\xd6\xac\x90\xdb\x28\xee\x34\x64\x20\xc5\x9e\x9d\xe8\x7c\xef\x0b\x28\xb6\x69\x94\x46\x4c\xcd\xd4\x7c\xe6\x3c\xbf\x32\x77\x40\xb0\x67\x4d\x8a\xcc\x32\xbb\x26\x59\xe9\xd6\x99\xfe\x42\x7b\x9d\x9f\x7f\xea\xf4\x92\x7f\x02\x00\x00\xff\xff\xd5\xf6\xe3\x1f\x01\x0e\x00\x00")

func infraStackLocalPathProvisionerYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackLocalPathProvisionerYaml,
		"infra-stack/local-path-provisioner.yaml",
	)
}

func infraStackLocalPathProvisionerYaml() (*asset, error) {
	bytes, err := infraStackLocalPathProvisionerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/local-path-provisioner.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraStackNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x80\x40\x08\x05\xd0\x9e\x29\x58\xc0\xc2\x96\x21\x2c\xed\x7f\xbc\x5f\x10\x03\x77\x11\x62\xe2\xf6\x3e\x2c\x3f\xf9\x94\xcf\x34\x7d\x77\xb9\x3d\x87\xe9\x81\x60\x2d\x5c\x94\x60\x63\xa0\x61\xa2\x9a\x08\x9a\xce\x95\xbe\xd5\x57\xcd\x90\x3f\x00\x00\xff\xff\xc4\xa4\xc4\xe0\x3d\x00\x00\x00")

func infraStackNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackNamespaceYaml,
		"infra-stack/namespace.yaml",
	)
}

func infraStackNamespaceYaml() (*asset, error) {
	bytes, err := infraStackNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackMinioYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xcd\x6a\x02\x41\x0c\xc0\xf1\xfb\x3c\x45\x58\xf0\xe8\x2e\xbd\xce\xad\x0c\x03\x5d\xa4\x0a\x6e\x11\x7a\x92\x10\x43\x77\xe8\x7c\x31\x09\x82\x6f\x5f\x46\x2c\xad\xc7\xc0\x2f\xf9\x07\x6b\x38\x71\x93\x50\xb2\x85\x95\x63\x1a\x09\x55\x23\x8f\xa1\x4c\xd7\x17\xf3\x1d\xf2\xc5\xc2\x1b\xc7\xe4\x56\x6c\x6a\x12\x2b\x5e\x50\xd1\x1a\x80\x8c\x89\x2d\xa4\x90\x43\x81\xc7\x28\x15\x89\x2d\x94\x9a\xc3\x56\x6e\xa2\x9c\x8c\x54\xa6\xae\xa9\xef\x3f\xb8\x01\x68\x5c\x8b\x85\x55\xb5\x8a\x9d\xa6\x7b\x38\x85\xdc\xab\x06\xe0\xfa\xfb\xd0\xb0\x79\x9f\xf7\xf3\xe1\x7c\xf2\xc7\x65\x3e\xec\x37\x83\x01\x10\xd6\x7e\x0f\x00\x89\x58\x64\xc7\xb7\x3f\xf7\xea\x9c\x5f\x96\xf3\xce\x7f\xde\x69\xc7\xd4\x58\x9f\xcc\xe2\xdd\xd1\x7f\xfc\x33\xb5\xd7\x44\x39\x13\x8f\xa2\xa5\xe1\x17\xbb\x88\x22\x16\x86\x58\x08\xe3\xb6\xa2\xae\xc3\x4f\x00\x00\x00\xff\xff\xca\xd0\x92\xa7\x28\x01\x00\x00")

func opniStackMinioYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackMinioYaml,
		"opni-stack/minio.yaml",
	)
}

func opniStackMinioYaml() (*asset, error) {
	bytes, err := opniStackMinioYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/minio.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xcb\x6a\xeb\x30\x10\xc6\xf1\xbd\x9e\x62\x30\x78\x79\x64\xce\x56\x3b\xe1\x14\x5a\x48\x1b\x13\x97\x5e\x56\x61\x22\x0f\x58\x54\x37\x34\xe3\xb6\x79\xfb\xe2\xc6\x34\x3b\x89\xff\xef\x1b\x2c\xfe\x85\x2a\xfb\x9c\x0c\xcc\x14\xa2\x76\x28\x12\x48\xfb\xdc\x7d\xfe\x57\x1f\x3e\x4d\x06\xee\x29\xc4\x7e\xc6\x2a\x2a\x92\xe0\x84\x82\x46\x01\x24\x8c\x64\x20\xa1\x30\x6c\x3f\x2e\xe8\xc8\x40\x2e\xc9\xff\xe3\x0b\x0b\x45\xc5\x85\xdc\x8a\xdd\x3a\xbf\x6a\x05\x50\xa9\x64\x03\xb3\x48\x61\xd3\x75\xbf\x8d\xf5\xd9\x4b\xc2\xe8\xb5\xcb\xb1\xdb\xde\x0a\x80\x49\xd6\x3d\x00\x2e\x32\x6b\x4a\x78\x0e\x34\x19\x68\xa4\x2e\xd4\xdc\x42\x41\xe6\xaf\x5c\xd7\xd2\x3e\xd9\xe7\xf1\x34\xd8\x71\x7c\x3d\x1c\x77\xed\x15\x55\x2a\xc1\x3b\xec\xf3\x92\xe4\xcf\x1c\xef\x86\xfd\x43\x6f\xc7\xcd\x44\xfc\x1e\xf0\x12\x32\xde\xae\x3c\xda\xb7\xd3\x60\xdf\xf7\x07\xbb\x6b\x9b\x9f\x00\x00\x00\xff\xff\x28\xb0\x7f\x2e\x2b\x01\x00\x00")

func opniStackNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackNatsYaml,
		"opni-stack/nats.yaml",
	)
}

func opniStackNatsYaml() (*asset, error) {
	bytes, err := opniStackNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/nats.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackOpendistroEsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\x3f\x6b\xf3\x30\x10\x06\xf0\x5d\x9f\xe2\x10\x78\x8c\x5f\xde\x55\x5b\x70\x0c\xe9\x12\x07\xcb\x6d\x47\x73\x95\x8f\x5a\x54\xff\xd0\x5d\x5a\xfa\xed\x8b\xc1\x5b\x33\x34\xab\x78\x7e\x7a\xee\x0e\x8b\x7f\xa1\xca\x3e\x27\x03\x2b\x85\xd8\x3a\x14\x09\xd4\xfa\xfc\xef\xf3\xbf\xfa\xf0\x69\x31\x70\xa6\x10\xbb\x15\xab\xa8\x48\x82\x0b\x0a\x1a\x05\x90\x30\x92\x01\x9d\x0b\xa5\xc5\xb3\xd4\x7c\x20\xd6\xfb\x3b\x17\x74\x64\x20\x97\xe4\x0f\xfc\xcd\x42\x51\x71\x21\xb7\x31\xb7\x7d\xd4\xe5\x24\x94\xc4\x40\x33\x5c\xfb\xcb\xe9\xc9\x4e\xe3\x30\xf7\x76\xee\xce\xc7\x71\x9a\xbb\xe1\x32\xf5\x97\xa9\x51\x00\x4c\xb2\x21\x00\x0a\xc8\xe2\x1d\x13\x56\xb7\xb6\x11\x59\xa8\xb6\x65\x9b\x9c\x85\x92\xa3\x96\x12\xbe\x05\x5a\x0c\x68\xa9\x37\xd2\x7f\x43\x2c\xb9\xe2\x3b\x75\x01\x99\x0d\xe8\x90\x1d\x86\x43\x41\x59\xef\xf9\x6d\xf1\x07\x2b\x7f\x91\x87\x0a\x6f\x4c\x75\xbf\x72\xd3\xdb\xf9\xd9\xf6\x63\x73\x2f\x57\x90\xf9\x2b\xd7\x65\xcf\x5d\x8f\xd6\xbe\x0e\xe3\xa9\xd1\x4a\xfd\x04\x00\x00\xff\xff\xf5\x2b\x61\x57\xdf\x01\x00\x00")

func opniStackOpendistroEsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackOpendistroEsYaml,
		"opni-stack/opendistro-es.yaml",
	)
}

func opniStackOpendistroEsYaml() (*asset, error) {
	bytes, err := opniStackOpendistroEsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/opendistro-es.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackRancherLoggingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\xbd\x4e\x03\x31\x10\x84\x7b\x3f\xc5\xea\x7a\xfb\x82\xa0\xc1\x2d\x0d\x05\x1d\x12\xfd\x62\x8f\xee\xac\xf8\x4f\xeb\x4d\x24\xde\x1e\x19\x42\x49\x73\x4a\x3d\x33\x9f\xe6\xe3\x9e\x3e\x20\x23\xb5\xea\x69\x47\x2e\x2e\xb0\x6a\x86\x4b\x6d\xbd\x3e\x98\x73\xaa\xd1\xd3\x2b\x72\x79\xd9\x59\xd4\x14\x28\x47\x56\xf6\x86\xa8\x72\x81\x27\xe1\x1a\x76\x88\xcd\x6d\xdb\x52\xdd\x6c\x90\x78\xcb\x46\xe7\x00\x4f\xad\xd7\x64\xc7\xd7\x50\x14\x33\x3a\xc2\x9c\x86\x09\xfb\x6f\x2b\xe8\xcd\xd3\xae\xda\xfd\xba\xfe\x34\x87\xbb\x35\xe7\x2b\x43\x74\xfd\x3b\xbc\x3c\xba\x67\xf7\x74\x3a\x2d\xc6\x5a\x6b\xee\xac\x42\x47\x3d\x8e\x3a\x10\x0d\xe8\xc4\x12\x71\x8c\x49\x53\xab\x9c\xdf\x7e\x99\xef\xed\x22\x01\xc3\xc9\x19\x0e\x95\x3f\x33\xa2\xa7\x45\xe5\x82\xe5\x3b\x00\x00\xff\xff\x27\x64\x4e\x0e\xc2\x01\x00\x00")

func opniStackRancherLoggingYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackRancherLoggingYaml,
		"opni-stack/rancher-logging.yaml",
	)
}

func opniStackRancherLoggingYaml() (*asset, error) {
	bytes, err := opniStackRancherLoggingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/rancher-logging.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackTraefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4f\x4b\xc3\x40\x10\xc5\xef\xf9\x14\x8f\x4a\x8f\x26\x18\x6f\x7b\x13\xa9\x58\x04\x95\x2a\xbd\xca\x74\x77\x9a\x2c\x4d\x76\x96\xd9\x69\xc5\x6f\x2f\x5b\x6a\xbd\xce\xfb\xf3\x9b\x47\x39\x6e\x59\x4b\x94\xe4\x30\xf2\x34\xb7\x9e\xcc\x26\x6e\xa3\x74\xa7\xbb\xe6\x10\x53\x70\x78\xe6\x69\x7e\x1c\x49\xad\x99\xd9\x28\x90\x91\x6b\x80\x44\x33\x3b\x98\x12\xef\xe3\x01\x97\x43\xc9\xe4\xd9\x41\x72\x8a\xb7\xe5\xa7\x18\xcf\x4d\xc9\xec\xab\xdf\xd7\x86\x6b\xa0\x01\x94\xb3\x38\x8c\x66\xb9\xb8\xae\x3b\xc3\x2f\x62\xa5\xff\xfb\x4e\x7f\xff\x2d\x96\x9f\x9b\x87\xd5\xd3\xfa\xe5\x6b\xbb\xda\x7c\xac\xdf\x5e\x97\x8b\x06\x28\x6c\xb5\x1e\xc8\xa2\x56\xda\x6f\xde\x15\xf6\x47\xe5\x36\x49\xe0\x77\xa9\xcc\xfb\xbe\xef\x7b\xdc\x60\x24\x0d\x5e\x42\x4c\x03\xaa\x78\x4e\x60\x2f\x7a\x5d\xc1\x29\x64\x89\xc9\x60\x82\x1d\xe3\x58\x38\x60\x22\x63\x45\x4c\x50\x4a\x7e\x64\xc5\x24\xc3\x10\xd3\xf0\x1b\x00\x00\xff\xff\x85\x05\x28\x3d\x3a\x01\x00\x00")

func opniStackTraefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackTraefikYaml,
		"opni-stack/traefik.yaml",
	)
}

func opniStackTraefikYaml() (*asset, error) {
	bytes, err := opniStackTraefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesDrainServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x53\xcf\x8e\xda\x3c\x10\xbf\xe7\x29\x46\x48\xdc\x48\x02\xe8\xbb\x7c\x3e\x35\x82\x54\x42\x65\x03\x4a\xd8\xad\x7a\x8a\x66\xcd\x74\xb1\xea\xd8\x96\x6d\x52\xf1\xf6\x95\x81\xb0\xcb\x6e\xb2\x7d\x81\xce\x25\x52\x7e\xf3\xfb\x33\x33\x32\x1a\xf1\x44\xd6\x09\xad\x18\xa0\x31\x2e\x6d\x67\xd1\x2f\xa1\xf6\x0c\x96\x64\xa4\x3e\x35\xa4\x7c\xd4\x90\xc7\x3d\x7a\x64\x11\x80\xc2\x86\x18\xec\x2d\x0a\x15\x3b\xb2\xad\xe0\x74\xfd\xeb\x0c\x72\x62\xa0\x8d\x12\xb1\x3b\x39\x4f\x4d\xe4\x0c\xf1\x40\xb2\x64\xa4\xe0\xe8\x18\xcc\x22\x00\x47\x92\xb8\xd7\x36\x20\x00\x0d\x7a\x7e\x58\xe3\x33\x49\x77\xf9\x01\x21\xc8\x47\x0b\x4f\x8d\x91\xe8\xe9\xca\x7a\x13\x29\x94\xbc\x13\x18\x90\x00\xe8\x02\x85\xe2\x5a\x79\x14\x8a\xec\x8d\x16\x0f\x4c\x77\x29\xd1\xe0\x0b\x31\xb0\xa8\xf8\x81\x6c\x7a\x9e\xf3\xae\x93\xb5\xd3\x64\x96\xcc\xee\x09\xdb\xa3\x94\x5b\x2d\x05\x3f\x31\xc8\xe4\x6f\x3c\xb9\x1b\x4e\xaa\x7d\x0d\xdc\x79\x17\xd9\xae\xaa\xab\xbc\x7c\xca\xcb\xfa\xb1\x5c\xdf\x70\x80\x16\xe5\x91\x18\x8c\x14\x7a\xc7\xd2\x34\x7c\x6a\x2e\x05\x29\xcf\xc6\x67\xd6\x36\xab\xaa\xef\x9b\x72\x39\xfe\x12\xb0\xf8\x82\x25\x6f\xee\x91\xb8\x96\xb3\xff\xe6\xf3\xf9\xe8\x83\xed\xc3\xaa\x58\x6d\x3e\xf7\x3d\x78\x6f\x58\x9a\x36\x42\x09\xfd\x5e\x35\xe1\xf2\xe8\x3c\xd9\x44\x6a\x8e\x92\xfd\x3f\x9d\x4e\x87\x3c\xb2\xc5\x22\xaf\xaa\xfa\x5b\xfe\xa3\xc7\x63\xfc\xbe\x67\x3c\x1c\x75\x51\xe6\xbb\xcf\x65\x5e\x7b\x7a\x64\xf2\xaa\xce\x8b\xe5\x76\xb3\x2a\x76\x03\xc3\x86\x2d\x6b\x43\x6a\x2f\x9c\xb7\x3a\xa6\x6e\xa5\xdd\xbd\xff\xb6\x84\x79\xdf\x12\xbe\x66\xab\x75\x48\x14\x0e\x55\xf5\x18\xff\x44\x21\x27\x64\xad\xb6\x93\x46\x38\x27\xd4\xcb\xe4\xa8\xf0\x59\xd2\xbf\x9b\x9d\x6f\xf6\x58\xe5\x65\x91\x3d\xe4\x7d\x0a\x57\xb8\x9f\xd8\xbd\x8e\x01\xe2\xed\xf1\x8c\xfe\x04\x00\x00\xff\xff\x2b\xc7\x22\xde\x13\x05\x00\x00")

func servicesDrainServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesDrainServiceYaml,
		"services/drain-service.yaml",
	)
}

func servicesDrainServiceYaml() (*asset, error) {
	bytes, err := servicesDrainServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/drain-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesLogOutputYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x3f\x8f\xdc\x20\x10\xc5\x7b\x7f\x8a\x91\x95\x96\xdd\x6c\x4a\xda\x28\x69\x23\xa5\x48\x93\x3f\xd6\x18\xc6\x98\x5b\xcc\x20\x18\x7c\xe7\xfb\xf4\x91\xf7\xbf\x4f\x3a\x45\x4a\xe7\xf9\x31\xef\x99\x79\x00\x26\xff\x83\x72\xf1\x1c\x35\x04\x76\xce\x47\xb7\xeb\x31\xbe\xa2\x37\x81\xab\xdd\x79\xde\xcf\x87\x9e\x04\x0f\xcd\xd1\x47\xab\xe1\x73\xa8\x45\x28\x7f\xab\x92\xaa\x34\x13\x09\x5a\x14\xd4\x0d\x00\x40\xc4\x89\x34\xb4\xe8\x39\x15\x65\x69\x62\x15\xd8\x29\x3e\xb5\xb6\xb7\x8e\x92\xd0\xac\x6d\x9c\xa2\x57\x65\x29\x42\x53\xdb\x94\x44\x66\x35\x19\x45\xd2\xd9\x8c\xa2\x4d\xec\xa3\xe8\x33\xdb\xef\x13\x2e\x81\xd1\xaa\x4c\x86\xfc\x4c\x59\x15\xca\xb3\x37\xb4\x7b\x30\xda\x95\xd9\xec\x4f\x72\xc3\x51\x28\x4a\x27\x4b\x22\x0d\x98\x52\xf0\x06\xc5\x73\xdc\x3f\x15\x8e\xa7\x96\xf5\xa3\xc3\x9c\x71\xd1\x20\xb9\xd2\x09\xf6\x75\x18\x28\x9f\xb7\x00\x20\xe8\x8a\x86\xf6\xe7\xef\xf6\x02\x86\x50\xcb\xd8\xf9\x28\x94\x67\x0c\x1a\x3e\x95\xcb\x82\x19\x6b\x3c\x76\xc1\x4f\x5e\xba\xe2\x5f\x49\xc3\x61\xea\x1b\xa5\x54\xf3\xbf\x11\x7f\x0d\xfc\x7c\x0f\x18\x9a\xf7\xf2\x1d\x02\x3f\xb7\xcd\xbf\xb2\x5d\xf5\x83\x0f\x42\xb9\x9c\x87\x53\x60\xc9\xb2\x5c\x27\x05\x4b\x9d\x65\xe9\x0a\x25\xcc\x28\x9c\x35\xb4\xaa\x7d\xb3\x18\xa9\x08\xd9\x87\xb4\x14\xb8\x4c\xe9\xe6\x01\xf4\x62\x42\xb5\x74\x07\x0a\x8e\xb4\x9c\xe6\xbe\x21\x80\x84\x22\x94\xa3\x86\x3f\xbf\xe2\x87\x8b\x4f\x73\xfd\x91\x90\x91\x2f\x2f\x86\xd2\x7a\x58\x45\xc3\x4d\x17\x30\xba\x8a\x8e\x1e\xd9\xaa\x7c\xc2\x19\x37\x20\x2d\x32\x5e\x8e\xf8\x8a\x1c\x6f\xca\x5c\xfb\x65\xeb\x51\x36\xa5\x29\x23\xe6\xb4\x35\x1d\xef\xf5\x54\x83\xf8\xe0\x23\x75\x6f\xaf\x43\xfb\x71\x77\x58\x43\x73\x81\x7b\x0c\xe7\x47\xf2\x9d\x86\xeb\x96\xd5\x7b\x8f\xe3\x6f\x00\x00\x00\xff\xff\x8f\x87\xaa\xbb\x87\x03\x00\x00")

func servicesLogOutputYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesLogOutputYaml,
		"services/log-output.yaml",
	)
}

func servicesLogOutputYaml() (*asset, error) {
	bytes, err := servicesLogOutputYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/log-output.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNulogInferenceServiceControlPlaneYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x6f\xdb\x2c\x14\x87\xef\xf3\x29\x50\x24\x5f\xda\x4e\xa2\xbe\xef\x34\xae\x16\x39\xa8\x8d\xea\xd9\x9e\x71\x3a\xed\x0a\x31\x7a\xd6\xa2\x61\x60\x80\x3d\xe5\xdb\x4f\x6e\x9b\x7f\x8d\xb3\xae\xdc\x44\x3a\x87\xdf\xf3\x70\x88\xe1\x56\xde\x81\xf3\xd2\x68\x8c\xb8\xb5\x3e\xed\xe7\x93\x9f\x52\xdf\x63\xb4\x02\xab\xcc\xb6\x05\x1d\x26\x2d\x04\x7e\xcf\x03\xc7\x13\x84\x34\x6f\x01\x23\xdd\x29\xf3\x10\x4b\xfd\x03\x1c\x68\x01\xb1\x07\xd7\x4b\x01\xb1\x30\x3a\x38\xa3\x62\xab\xb8\x86\x97\xdd\xde\x72\x01\x18\x19\xab\x65\xec\xb7\x3e\x40\x3b\xf1\x16\xc4\x00\x73\x60\x95\x14\xdc\x63\x34\x9f\x20\xe4\x41\x81\x08\xc6\x0d\x1d\x84\x5a\x1e\xc4\x63\xce\xbf\x83\xf2\xcf\x05\x34\x1c\xf0\xdf\xd5\x01\x5a\xab\x78\x80\x17\xda\xd1\x08\xc3\x52\x27\xe0\x77\xa2\x11\xda\x0d\x30\xac\xa1\xcb\xa5\x06\xb7\xc7\xc5\xef\xbc\xa5\xe7\x25\x5b\xfe\x00\x18\x39\xae\xc5\x23\xb8\xf4\xe9\xbe\xce\xb2\xb8\x9f\x25\xf3\x64\x7e\x1a\xaa\x3a\xa5\x2a\xa3\xa4\xd8\x62\xb4\x54\xbf\xf9\xd6\xef\xfb\xa0\xfb\xc3\x90\xbb\x73\x15\xcb\x86\x32\x4a\xea\x3b\x52\xb3\x4d\x9d\xef\xfb\x08\xf5\x5c\x75\x80\xd1\x54\xf3\xe0\x71\x9a\x0e\x3f\x4c\x28\x09\x3a\xe0\xe8\x29\x55\x2d\x29\xfd\x5a\xd6\xab\xe8\xd3\xd0\x8b\x9f\x7b\xc9\xd1\x7f\x9b\xf8\x5e\xe0\xab\xc5\x62\x31\x3d\xd3\x12\xca\x48\xb1\xaa\xca\x75\xd1\x8c\x28\x1f\x43\xb0\x83\xd3\x58\xd0\xf7\xd2\x07\x67\x62\xd8\x09\x76\xd3\xbf\x16\x25\x42\x75\x3e\x80\x4b\x94\x11\x5c\xe1\x8f\x8b\xd9\xec\x5c\xfb\x79\x5d\xac\xcb\xb7\xcc\x38\x4d\x5b\xa9\xa5\x79\xcb\x30\xbb\x6c\x58\x66\x19\xa1\x94\xdd\x92\x6f\x23\x8e\xe8\xf5\x9e\xe8\x12\x86\x92\xac\x26\xcd\xdf\x31\x87\x3d\x63\x98\x72\x45\x72\xd6\xdc\xd4\x84\xde\x94\xf9\x6a\x84\x32\x4b\xfe\x1f\xb5\xb3\xbc\xbc\x66\x4d\x79\x4b\x0a\x3a\x92\xba\x3a\xcf\xac\x29\xcb\xca\xa2\xa9\xcb\x9c\x55\xf9\xb2\x20\x4f\x1f\xd5\x3a\x23\x23\xe9\xc6\x75\x70\x00\x38\xf0\xa6\x73\x02\x8e\x5e\x20\x42\x4a\xb6\x32\x9c\x54\x86\x77\xdb\x1a\xb7\xc5\x68\x71\x2d\x4f\xea\xc2\x76\x18\x4d\x3f\x24\xff\x4d\x8f\xca\x0e\x7e\x75\xe0\x2f\x21\xe6\xa3\x88\xa8\xd8\x0c\x53\xbf\x1c\x9c\x65\xd5\x86\xd5\xe4\xcb\x86\xd0\x26\x9a\xfe\x09\x00\x00\xff\xff\xd3\xed\x38\x23\x1d\x05\x00\x00")

func servicesNulogInferenceServiceControlPlaneYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNulogInferenceServiceControlPlaneYaml,
		"services/nulog-inference-service-control-plane.yaml",
	)
}

func servicesNulogInferenceServiceControlPlaneYaml() (*asset, error) {
	bytes, err := servicesNulogInferenceServiceControlPlaneYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nulog-inference-service-control-plane.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNulogInferenceServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x4f\x6f\xda\x40\x10\xc5\xef\x7c\x8a\x51\x24\x8e\xb6\x01\xb5\x87\xee\xa9\x28\x5e\x35\x28\xae\x8d\xbc\x6e\xaa\x9e\xac\xed\x32\x85\x55\xf7\x9f\x76\xd7\xae\xf8\xf6\x95\x43\x20\x10\x9c\x30\x17\x4b\xf3\xe6\xbd\xdf\x8c\x2d\x73\x27\x9f\xd0\x07\x69\x0d\x01\xee\x5c\xc8\xfa\xf9\xe4\xaf\x34\x1b\x02\x39\x3a\x65\xf7\x1a\x4d\x9c\x68\x8c\x7c\xc3\x23\x27\x13\x00\xc3\x35\x12\x30\x9d\xb2\xdb\x44\x9a\x3f\xe8\xd1\x08\x4c\x02\xfa\x5e\x0a\x7c\xd1\x83\xe3\x02\x09\x58\x67\x64\x12\xf6\x21\xa2\x9e\x04\x87\x62\xb0\x7b\x74\x4a\x0a\x1e\x08\xcc\x27\x00\x01\x15\x8a\x68\xfd\xa0\x00\x68\x1e\xc5\xae\xe0\xbf\x51\x85\x43\x03\x86\x95\x3e\x82\x45\xd4\x4e\xf1\x88\x2f\xfe\xb3\x35\x87\x52\x17\x51\x37\xc3\x00\x8e\x4b\x0e\x25\xac\x89\x5c\x1a\xf4\xa7\x80\xe4\xe6\xed\x87\x92\x9a\x6f\x91\x80\xe7\x46\xec\xd0\x67\xcf\x6f\xe1\x6a\x9a\xf4\xb3\x74\x9e\xce\x2f\x4d\xeb\x4e\xa9\xb5\x55\x52\xec\x09\x2c\xd5\x3f\xbe\x0f\x27\x1d\x4d\xff\x7a\xc8\x71\x93\x72\xd9\xb0\x96\xd1\xfa\x89\xd6\xed\x8f\xba\x38\xe9\x00\x3d\x57\x1d\x12\xb8\x33\x3c\x06\x92\x65\xc3\xa3\x15\x4a\xa2\x89\x64\xfa\xec\x5a\x2f\x19\xfb\x59\xd5\xf9\xf4\xeb\xa0\x25\x07\x2d\x3d\xfb\x62\x69\xe8\x05\xf9\xb4\x58\x2c\xee\xae\xb0\x94\xb5\xb4\xcc\xd7\xd5\xaa\x6c\x46\x90\xbb\x18\xdd\xc0\xb4\x0e\xcd\x46\x86\xe8\x6d\x82\x47\xc0\xf1\xfa\xb7\xa0\x54\xa8\x2e\x44\xf4\xa9\xb2\x82\x2b\xf2\x65\x31\x9b\x5d\x63\xbf\xaf\xca\x55\x75\x8b\x4c\xb2\x4c\x4b\x23\xed\x2d\xc2\xec\x7d\xc2\xf2\xfe\x9e\x32\xd6\x3e\xd2\x5f\x23\x8c\xe9\xdb\x99\xe9\x7b\x31\x8c\xde\xd7\xb4\xf9\x38\xe6\x75\x66\x2c\xa6\xca\x69\xd1\x36\x0f\x35\x65\x0f\x55\x91\x8f\xa4\xcc\xd2\xcf\xa3\xf4\xb6\xa8\xbe\xb5\x4d\xf5\x48\x4b\x36\xe2\x3a\xf3\x78\x0c\xb6\xf3\x02\xcf\x7e\x12\x00\x25\xb5\x8c\x17\x1d\x00\xd3\xcb\x8d\xe4\xa9\xb0\x3a\xdb\xba\x8e\xc0\xfc\x7f\x00\x00\x00\xff\xff\x9d\x71\xdb\x6c\x38\x04\x00\x00")

func servicesNulogInferenceServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNulogInferenceServiceYaml,
		"services/nulog-inference-service.yaml",
	)
}

func servicesNulogInferenceServiceYaml() (*asset, error) {
	bytes, err := servicesNulogInferenceServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nulog-inference-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNvidiaPluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xd1\x6e\xdb\x36\x14\x7d\xd7\x57\x1c\xd8\x28\xd0\x02\x91\xd4\xf6\x69\x53\x9f\xbc\x24\xc3\x8c\xa6\x76\x61\xa7\x2d\x8a\x61\x18\xae\xc9\x6b\x89\x30\x45\x72\x24\x65\x47\x7f\x3f\x50\x56\x9c\xa8\x03\xd6\x3e\x0d\x98\x5f\x12\x88\xe7\xdc\x7b\x78\xee\x21\x39\xc7\xb5\x75\xbd\x57\x75\x13\xf1\x52\xbc\xc2\xdb\xd7\x6f\x7e\xbe\xc2\xea\xf3\xf2\x66\xb9\xc0\xf5\x7a\xf3\x71\xbd\x59\xdc\x2f\xd7\xab\x02\x58\x68\x8d\x01\x18\xe0\x39\xb0\x3f\xb2\x2c\xb2\x79\x36\xc7\x9d\x12\x6c\x02\x4b\x74\x46\xb2\x47\x6c\x18\x0b\x47\xa2\xe1\xc7\x95\x2b\x7c\x66\x1f\x94\x35\x78\x5b\xbc\xc6\xcb\x04\x98\x8d\x4b\xb3\x57\xef\xb2\x39\x7a\xdb\xa1\xa5\x1e\xc6\x46\x74\x81\x11\x1b\x15\xb0\x57\x9a\xc1\x0f\x82\x5d\x84\x32\x10\xb6\x75\x5a\x91\x11\x8c\x93\x8a\xcd\xd0\x66\x2c\x52\x64\x73\x7c\x1d\x4b\xd8\x5d\x24\x65\x40\x10\xd6\xf5\xb0\xfb\xe7\x38\x50\x1c\x04\xa7\x5f\x13\xa3\xab\xca\xf2\x74\x3a\x15\x34\x88\x2d\xac\xaf\x4b\x7d\x06\x86\xf2\x6e\x79\x7d\xbb\xda\xde\xe6\x6f\x8b\xd7\x03\xe5\x93\xd1\x1c\xd2\xc6\xff\xea\x94\x67\x89\x5d\x0f\x72\x4e\x2b\x41\x3b\xcd\xd0\x74\x82\xf5\xa0\xda\x33\x4b\x44\x9b\xf4\x9e\xbc\x8a\xca\xd4\x57\x08\x76\x1f\x4f\xe4\x39\x9b\x43\xaa\x10\xbd\xda\x75\x71\x62\xd6\xa3\x3a\x15\x26\x00\x6b\x40\x06\xb3\xc5\x16\xcb\xed\x0c\xbf\x2c\xb6\xcb\xed\x55\x36\xc7\x97\xe5\xfd\x6f\xeb\x4f\xf7\xf8\xb2\xd8\x6c\x16\xab\xfb\xe5\xed\x16\xeb\x0d\xae\xd7\xab\x9b\x65\x1a\xd4\x16\xeb\x5f\xb1\x58\x7d\xc5\xfb\xe5\xea\xe6\x0a\xac\x62\xc3\x1e\xfc\xe0\x7c\xd2\x6f\x3d\x54\xb2\x71\x18\x1d\xb6\xcc\x13\x01\x7b\x7b\x16\x14\x1c\x0b\xb5\x57\x02\x9a\x4c\xdd\x51\xcd\xa8\xed\x91\xbd\x51\xa6\x86\x63\xdf\xaa\x90\x86\x19\x40\x46\x66\x73\x68\xd5\xaa\x48\x71\xf8\xf2\x8f\x4d\x15\x59\x46\x4e\x8d\xe3\xaf\x92\x67\xa1\x3c\xbe\xc9\x0e\xca\xc8\x0a\x37\xc4\xad\x35\x5b\x8e\x59\xcb\x91\x24\x45\xaa\x32\xc0\x50\xcb\x15\xcc\x51\x49\x45\xb9\xe4\xa3\x12\x9c\x3b\xdd\xd5\xca\xe4\x72\x20\x04\x8e\x23\x2c\x38\x12\x5c\xc1\x3a\xa3\xf2\xd0\x87\xc8\x6d\x96\xb4\xa7\x2a\x81\x35\x8b\x68\x7d\xfa\x1f\x68\x29\x8a\xe6\x8e\x76\xac\xc3\xf9\xc3\xbf\xb7\x09\x19\xd0\x39\x49\x91\xb7\xd1\x53\xe4\xba\x3f\xb3\x62\xef\xb8\xc2\xc6\x6a\xad\x4c\xfd\x69\x00\x64\x40\xe4\xd6\x69\x8a\x3c\xb6\x7a\xb6\x95\xf4\x9b\xe3\x3e\xa5\x99\x8c\xb1\x67\x97\x86\x39\xb3\xf3\x2c\x28\xb2\x2c\xf0\x3e\x05\xbc\x61\x7f\xf6\x7f\x47\xe2\x70\x22\x2f\x87\xbc\x53\x54\x3b\xa5\x55\xec\x2f\xb5\xd2\xc8\x52\x74\x43\x55\x96\x87\x6e\xc7\xde\x70\xe4\x50\x28\x5b\x4a\x2b\x42\x19\x29\x1c\x42\x49\xb2\x55\x46\x85\xc8\x3e\x17\xba\x4b\x7f\xcb\xba\x23\x4f\x26\x32\xcb\x3c\x88\x86\x65\x97\x76\x90\x8b\x94\x51\x41\x3a\x27\x29\xad\xc9\x9d\x95\xa1\x1c\x5b\x3d\xe9\xbd\x38\x06\x8c\x54\xf6\x05\x69\xd7\x50\x31\x55\x70\xa9\xe6\xac\xac\x30\x9b\x8d\x34\x3d\xb1\xfd\xfb\xc6\x03\x8f\x33\x1c\x2c\xb7\x9a\xfd\x54\xc7\xe8\xe8\xd3\xca\xff\xc3\xd1\x1c\x07\xee\x2b\x5c\x8f\x88\x45\x02\x84\xb5\xd1\xfd\xc5\x19\xeb\xd2\x86\xac\xaf\x70\xfb\xa0\x42\x0c\x53\xe2\xd9\xb1\x42\xd8\xb6\xac\x5d\xf7\x3d\x12\xc0\xfb\x3d\x8b\x58\x61\x65\xb7\xe3\xd8\x2e\x7b\xfe\x40\xfe\x70\xbe\x64\x9d\x95\xa0\x90\xae\xcb\x51\x16\x48\xca\xdc\x9a\x77\x38\x35\x6c\xc0\x26\xdd\x6f\xf2\x6a\x38\xd2\xdf\x40\x2e\xd5\x2e\xa9\x78\x7c\x17\x86\x07\xc2\x76\x5e\x70\x18\x26\xf0\x0d\x31\x35\x0d\x08\x16\xb1\xa1\x98\x2a\xf7\x10\xf4\x54\x6e\xc7\x89\x3e\xd6\x94\xa0\x7d\x64\x0f\xc2\x9e\x94\xee\x3c\x17\xff\xfd\xe0\x9c\x57\xd6\xab\xd8\x5f\x6b\x0a\x61\x35\xa4\x77\x76\xbe\x6d\x72\x63\x25\x5f\xa8\x8f\x81\x17\xd6\xa4\x37\x88\xfd\x25\xb1\x39\x54\x4b\xf5\x25\xf5\xe5\xe1\xa7\x30\x4d\x7e\xf5\xe2\xfc\xe4\xfe\xf9\xf9\x76\xb3\x5d\xae\x57\x2f\x7e\xe4\xb4\x88\xe8\x9f\x4e\x26\x8b\x6e\xd0\x68\x4d\xe4\x87\xf8\x74\xda\x00\xd2\xda\x9e\x3e\x7a\x75\x54\x9a\x6b\xbe\x0d\x82\xf4\x70\x6a\x2a\xec\x49\x07\x7e\x86\x14\xe4\x68\x38\x1d\x8a\xc3\xf3\x0a\x80\xf4\xd6\x55\xf8\x7d\xb6\xb8\xbb\x9b\xfd\x71\x59\x39\x5a\xdd\xb5\xfc\xc1\x76\x26\x4e\xf0\xf9\xa8\x7a\x22\x77\x52\xaf\x4d\x9c\x8f\x14\x9b\x0a\xe5\x91\x7c\xa9\xd5\x6e\x98\xa1\xe6\x58\x4e\x58\x8f\x71\x3e\xb7\x7a\xd6\xe5\x7b\x3d\x1a\x1b\xce\x0d\x26\x7d\xdd\x8f\xb4\xfc\x3b\x00\x00\xff\xff\x1a\x6d\xa2\x75\x14\x09\x00\x00")

func servicesNvidiaPluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNvidiaPluginYaml,
		"services/nvidia-plugin.yaml",
	)
}

func servicesNvidiaPluginYaml() (*asset, error) {
	bytes, err := servicesNvidiaPluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nvidia-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesPayloadReceiverServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x6a\x1b\x31\x10\xbd\xef\x57\x0c\x81\x1c\xb5\x1b\x9b\x1e\x8a\x4e\x35\x24\x87\x42\x48\x8d\xdd\xa6\x47\x33\x96\xa7\xb1\xb0\x56\x12\x9a\xf1\xb6\xfe\xfb\x22\xef\xae\xb2\xa1\xc4\x6e\xa1\xba\x58\x66\x66\xde\xbc\xf7\xf6\x09\xa3\x7d\xa6\xc4\x36\x78\x0d\xdd\xac\x3a\x58\xbf\xd3\xb0\xa6\xd4\x59\x43\x55\x4b\x82\x3b\x14\xd4\x15\x80\xc7\x96\x34\x44\x3c\xb9\x80\x3b\x95\xc8\x90\xed\x28\x29\x1e\x5a\xfb\x06\x8e\x68\x48\x43\x88\xde\x2a\x3e\xb1\x50\x5b\x01\x38\xdc\x92\xe3\x8c\x01\x30\xb4\x5f\x00\xe2\x48\x26\xf7\x32\x39\x32\x12\x52\x3f\x87\x31\x5e\x5c\x1e\x43\x92\xf3\x0a\x75\xbe\x6a\xf8\x78\x57\x29\xa5\xaa\xa9\x3c\x8c\x91\x9b\xa2\xf1\x9e\xa2\x0b\xa7\x96\xbc\xfc\x17\x99\x23\xed\x44\xd1\x59\x83\xac\x61\xf6\x87\x88\x16\xc5\xec\x1f\x27\x6e\x5c\xd7\x25\xd4\x46\x87\x42\x03\xc0\x84\x68\x3e\xee\x0d\xd6\x75\x34\x80\x91\x66\x3e\x26\x78\x41\xeb\x29\x15\x04\x75\x5d\x7e\x7f\x6c\x8b\x2f\xa4\x21\xa1\x37\x7b\x4a\xcd\xd9\x88\xf7\x86\x74\x77\x57\xcf\xea\xd9\xdb\xd9\xe5\xd1\xb9\x65\x70\xd6\x9c\x34\x2c\xdc\x4f\x3c\x71\xa9\x93\xef\x5e\x15\x8d\x8c\x9e\x16\x5f\xd7\x9b\xf5\xc3\xea\xf9\x61\xb5\xf9\xb6\x7a\x2c\x75\x80\x0e\xdd\x91\x34\xdc\x78\x14\xd6\x4d\x93\x7f\x36\xc6\x59\xf2\xa2\x6f\xcf\x53\xcb\xc5\x7a\xfd\xfd\xcb\xea\xfe\xf6\x53\xae\xa9\xbe\x56\x4f\xbe\x5d\xcd\x9d\xd1\x1f\xe6\xf3\xf9\x4d\x81\x2d\x71\x1a\x59\x14\xaf\x96\xef\xa5\x8b\x7e\x09\xf9\x7c\xcd\x19\xdb\x92\xe0\x18\xb4\xcf\xfe\x25\x11\xf3\x3f\xa4\x4c\xd9\x61\xe4\xc2\xa3\x42\xef\x83\xa0\xe4\x7d\x3d\xcf\xc3\x71\x4b\xc9\x93\x10\xd7\x36\x34\x03\x42\x6d\x1c\x32\x6b\x90\x84\xf4\xc3\x1e\x5e\x53\x7a\x74\x34\x3c\x97\xbd\x48\x1c\x95\x46\x94\xfd\x24\x0c\xf9\xaf\x86\xa6\xd8\xb0\x45\x73\x20\xbf\xd3\x13\xf7\x07\xc6\x4f\x7f\x17\x9b\xd2\x5f\x5c\xac\x7e\x07\x00\x00\xff\xff\x49\x26\x9d\xf0\x80\x04\x00\x00")

func servicesPayloadReceiverServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesPayloadReceiverServiceYaml,
		"services/payload-receiver-service.yaml",
	)
}

func servicesPayloadReceiverServiceYaml() (*asset, error) {
	bytes, err := servicesPayloadReceiverServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/payload-receiver-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesPreprocessingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x44\x81\x1c\xed\xfc\xc1\x2e\xd3\x69\xc1\xe2\xc3\x80\x2e\x0d\xec\xb6\x3b\x06\x8c\x4c\x34\x42\x65\x49\x10\x19\x0f\xf9\xf6\x83\x5a\xdb\x6b\x0b\x1b\xbb\x6c\x18\x2f\x06\xfc\xf4\x48\x3e\xfe\x30\x98\x47\x8a\x6c\xbc\x53\x80\x21\xf0\xb2\x5b\x67\xcf\xc6\x35\x0a\x76\x14\xac\xbf\xb6\xe4\x24\x6b\x49\xb0\x41\x41\x95\x01\x38\x6c\x49\x41\x88\x14\xa2\xd7\xc4\x6c\xdc\x53\xce\x14\x3b\xa3\xa9\x57\x39\xa0\x26\x05\x3e\x38\x93\xf3\x95\x85\xda\x8c\x03\xe9\x64\x8e\x14\xac\xd1\xc8\x0a\xd6\x19\x00\x93\x25\x2d\x3e\x26\x05\xa0\x45\xd1\xe7\x5b\x3c\x91\xe5\xd7\x1f\x90\x16\x9a\x1f\x25\xd4\x06\x8b\x42\xbd\xfb\xcd\x8a\xa9\xec\xbb\x46\x7f\x68\x05\x30\x2c\x98\xca\x38\x23\x5f\xbd\x13\x34\x8e\xe2\xd8\x22\xef\x93\x3f\x9b\x13\x3a\xcc\x1b\xe4\xf3\xc9\x63\x6c\xc6\x09\xa6\xc5\x27\x52\x10\xd1\xe9\x33\xc5\xe5\x4b\xfc\x8f\x8f\x55\xb7\x2a\xd6\xc5\xfa\xbd\xe7\x70\xb1\xf6\xe0\xad\xd1\x57\x05\x5b\xfb\x13\xaf\x3c\xea\xe4\xba\xdf\x11\x86\x0d\xca\xfa\x58\xee\x77\x87\xbb\x6f\xfb\xfb\x51\x03\xe8\xd0\x5e\x48\xc1\xcd\x59\x24\xb0\x5a\x2e\x7d\x20\xd7\x18\x96\xe8\x73\xe2\x5c\x5b\x43\x4e\x86\xc8\xc5\x1b\x36\x05\x77\xba\xd0\xf6\xc2\x42\xb1\xb0\x5e\xa3\x55\x9f\x37\xab\xd5\xcd\xd4\xd8\x87\xba\xac\x26\x46\x2e\x7a\x69\x31\x69\x3a\x6c\xeb\xfa\xc7\x5d\xb5\x9b\x31\x0e\xf2\x68\xd6\xb3\xa7\x9f\xc7\x37\x77\xff\x49\xc7\x5f\x81\xb0\xdf\xde\xd7\xc7\xba\xac\x1e\xcb\xea\xf8\x50\xdd\x4e\x84\x73\x28\x89\x43\xfa\x1c\x5f\xcf\xaf\x16\x2f\xae\x31\xf1\x97\xa4\xf5\x68\x3e\x22\x51\x9f\x36\x9b\xcd\xe4\x3d\xff\x23\xfb\xfd\xf6\x7b\xf9\x0f\xf9\xff\x0a\x00\x00\xff\xff\x33\x9b\x03\x80\x8c\x04\x00\x00")

func servicesPreprocessingYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesPreprocessingYaml,
		"services/preprocessing.yaml",
	)
}

func servicesPreprocessingYaml() (*asset, error) {
	bytes, err := servicesPreprocessingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/preprocessing.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesTrainingControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\x6f\xeb\x36\x10\xbc\xeb\x57\x10\x06\x7c\x94\xfc\x81\x1e\x5a\x9e\xaa\xd8\x44\xeb\x34\x91\x0d\xc9\x4e\xd1\x5e\x04\x9a\xda\xd8\x4c\x28\x92\x20\x29\x05\x7e\xbf\xfe\x81\xfe\x90\x95\x58\xb6\x73\x79\xba\x88\xcb\xdd\x9d\x5d\xce\x0c\xd5\xfc\x05\x8c\xe5\x4a\x62\x54\x8f\x82\x77\x2e\x0b\x8c\x32\x30\x35\x67\x10\x33\xa6\x2a\xe9\x82\x12\x1c\x2d\xa8\xa3\x38\x40\x48\xd2\x12\x30\x72\x86\x72\xc9\xe5\x26\x64\x4a\x3a\xa3\x84\x00\x13\x9a\xf5\x31\x6d\x35\x65\x80\x91\xd2\x92\x87\x76\x67\x1d\x94\x41\x18\x86\x47\xe8\x89\xa8\xac\x03\x93\x2a\x01\x41\x7b\xb6\x59\x53\x16\xd1\xca\x6d\x95\xe1\x3f\xa8\xe3\x4a\x46\xef\xbf\xdb\x88\xab\x41\x3d\xfa\xfe\x02\xa6\x12\x60\x7d\x55\x88\xa8\xe6\x7f\x19\x55\xe9\x7d\xe8\xbf\x10\xf5\x7a\xe7\x23\xd5\xda\xb6\xc2\x35\x75\x6c\x7b\x88\x0d\x58\x55\x19\x06\xad\x46\x90\x85\x56\x5c\x3a\xdb\xdc\x14\xa0\x85\xda\x95\xd0\xbe\xd3\xaa\x38\x07\x6f\x6a\x7d\x08\x6a\x30\xeb\x16\xd4\x06\x5c\x73\x16\xdc\x9e\x83\x0f\xbf\x41\x13\x31\x03\xd4\x41\x6b\x9c\x00\x07\xdd\x34\x3e\x70\x59\x70\xb9\xf9\x05\x6c\xda\x6a\xfd\x06\xcc\x1d\x09\xed\xb4\x86\x5f\xef\x8e\x25\xae\x9a\xc2\x28\x01\x29\xbc\x7a\xf4\x93\x58\x37\x36\x0f\x10\xba\x74\xd0\x9d\xe1\x9e\xaf\x36\x2d\x5e\xf4\x41\xe3\xf2\x69\xa3\xe1\xf7\x28\xb9\x6e\x6f\xab\x81\xf9\x56\x03\x5a\x70\x46\x2d\x46\xa3\x00\x21\x0b\x02\x98\x53\xe6\x20\x7e\xe9\xf5\x7d\xa2\x6b\x10\x8d\x1b\xa8\xd6\xd7\x06\x39\x28\xb5\xa0\x0e\x8e\xbd\xad\xf5\xfc\x27\x3e\xc1\xdc\x04\x42\xe8\xb4\xdc\xfe\xfc\x49\xbd\xe4\x9e\x70\x08\xf9\x3b\xca\x25\x98\x96\x85\x6f\x11\x74\xf8\x78\x49\x37\x80\x91\xa1\x92\x6d\xc1\x0c\xf6\x54\x75\xd4\xe3\x7a\x18\x8d\xa2\xd1\xe7\xb6\x45\x25\xc4\x42\x09\xce\x76\x18\xc5\xe2\x83\xee\x6c\x93\x07\x59\x9f\xdf\x7c\xda\x23\x89\x97\x59\x9e\x91\xf4\x85\xa4\xf9\x2a\x7d\x6a\xf2\x08\xd5\x54\x54\x80\x51\x4f\x52\x67\xf1\x60\xe0\x7f\x39\x13\x1c\xa4\xc3\xfd\x7d\xd7\x22\xce\xb2\x7f\xe7\xe9\xb4\xff\xa7\xcf\x85\x87\x5c\xd4\x12\x36\xb2\x35\xc3\xbf\x8d\xc7\xe3\xde\xc5\xd8\xe7\x59\x32\x9b\xdf\x9e\xbb\x75\x4e\xe3\xc1\xa0\xe4\x92\xab\xaf\xa8\x11\x3b\xb8\x38\x12\x8a\x51\x81\xff\x18\x0e\x87\xd7\x66\xc4\x93\x09\xc9\xb2\xfc\x1f\xf2\x5f\xc7\x8c\xfe\xd7\x9a\xfe\xf5\x55\x27\x29\x59\xde\x86\x39\xd7\x74\xc0\x3c\xce\x1f\xf2\x24\x7e\x26\xd9\x22\x9e\x90\x0e\x8c\x02\x5e\x69\x25\xdc\x65\x23\xc9\x72\x92\x4c\x17\xf3\x59\xb2\xbc\xc2\x92\x97\x47\x69\x90\x05\xb7\xce\xa8\x10\x4e\x5a\x84\x47\xbf\xde\x63\x6f\xdc\xc5\x1e\xc9\xf2\x55\x46\x52\xbf\x72\xd7\x8b\x8f\xe9\x8e\x87\x92\xb3\x33\xae\x34\x36\xc6\xb9\x6c\x4e\xe6\x53\x92\x2f\x9f\xb2\x3c\x25\x8f\x64\xb2\xcc\x57\x49\xbc\x5a\xfe\x3d\x4f\x67\xff\x93\x2e\xb4\x61\x2f\xf8\x19\x00\x00\xff\xff\x08\x47\xba\x58\x82\x07\x00\x00")

func servicesTrainingControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesTrainingControllerYaml,
		"services/training-controller.yaml",
	)
}

func servicesTrainingControllerYaml() (*asset, error) {
	bytes, err := servicesTrainingControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/training-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infra-stack/helm-controller.yaml":                    infraStackHelmControllerYaml,
	"infra-stack/local-path-provisioner.yaml":             infraStackLocalPathProvisionerYaml,
	"infra-stack/namespace.yaml":                          infraStackNamespaceYaml,
	"opni-stack/minio.yaml":                               opniStackMinioYaml,
	"opni-stack/nats.yaml":                                opniStackNatsYaml,
	"opni-stack/opendistro-es.yaml":                       opniStackOpendistroEsYaml,
	"opni-stack/rancher-logging.yaml":                     opniStackRancherLoggingYaml,
	"opni-stack/traefik.yaml":                             opniStackTraefikYaml,
	"services/drain-service.yaml":                         servicesDrainServiceYaml,
	"services/log-output.yaml":                            servicesLogOutputYaml,
	"services/nulog-inference-service-control-plane.yaml": servicesNulogInferenceServiceControlPlaneYaml,
	"services/nulog-inference-service.yaml":               servicesNulogInferenceServiceYaml,
	"services/nvidia-plugin.yaml":                         servicesNvidiaPluginYaml,
	"services/payload-receiver-service.yaml":              servicesPayloadReceiverServiceYaml,
	"services/preprocessing.yaml":                         servicesPreprocessingYaml,
	"services/training-controller.yaml":                   servicesTrainingControllerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infra-stack": &bintree{nil, map[string]*bintree{
		"helm-controller.yaml":        &bintree{infraStackHelmControllerYaml, map[string]*bintree{}},
		"local-path-provisioner.yaml": &bintree{infraStackLocalPathProvisionerYaml, map[string]*bintree{}},
		"namespace.yaml":              &bintree{infraStackNamespaceYaml, map[string]*bintree{}},
	}},
	"opni-stack": &bintree{nil, map[string]*bintree{
		"minio.yaml":           &bintree{opniStackMinioYaml, map[string]*bintree{}},
		"nats.yaml":            &bintree{opniStackNatsYaml, map[string]*bintree{}},
		"opendistro-es.yaml":   &bintree{opniStackOpendistroEsYaml, map[string]*bintree{}},
		"rancher-logging.yaml": &bintree{opniStackRancherLoggingYaml, map[string]*bintree{}},
		"traefik.yaml":         &bintree{opniStackTraefikYaml, map[string]*bintree{}},
	}},
	"services": &bintree{nil, map[string]*bintree{
		"drain-service.yaml":                         &bintree{servicesDrainServiceYaml, map[string]*bintree{}},
		"log-output.yaml":                            &bintree{servicesLogOutputYaml, map[string]*bintree{}},
		"nulog-inference-service-control-plane.yaml": &bintree{servicesNulogInferenceServiceControlPlaneYaml, map[string]*bintree{}},
		"nulog-inference-service.yaml":               &bintree{servicesNulogInferenceServiceYaml, map[string]*bintree{}},
		"nvidia-plugin.yaml":                         &bintree{servicesNvidiaPluginYaml, map[string]*bintree{}},
		"payload-receiver-service.yaml":              &bintree{servicesPayloadReceiverServiceYaml, map[string]*bintree{}},
		"preprocessing.yaml":                         &bintree{servicesPreprocessingYaml, map[string]*bintree{}},
		"training-controller.yaml":                   &bintree{servicesTrainingControllerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
