// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// src/k8s/infra-stack/helm-controller.yaml
// src/k8s/infra-stack/local-path-provisioner.yaml
// src/k8s/infra-stack/namespace.yaml
// src/k8s/opni-stack/minio.yaml
// src/k8s/opni-stack/nats.yaml
// src/k8s/opni-stack/opendistro-es.yaml
// src/k8s/opni-stack/rancher-logging.yaml
// src/k8s/opni-stack/traefik.yaml
// src/k8s/services/drain-service.yaml
// src/k8s/services/nulog-inference-service-control-plane.yaml
// src/k8s/services/nulog-inference-service.yaml
// src/k8s/services/nvidia-plugin.yaml
// src/k8s/services/payload-receiver-service.yaml
// src/k8s/services/preprocessing.yaml
// src/k8s/services/training_controller.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infraStackHelmControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x3f\x8f\x13\x31\x10\xc5\x7b\x7f\x8a\x51\x4a\x24\x6f\x88\x44\x71\x72\xc7\x1f\x89\x06\x51\x1c\x12\x0d\xa2\x98\x75\x1e\x17\x13\xff\xd3\xd8\x5e\xe9\xf8\xf4\xc8\x21\x8b\x36\xc9\x2d\x3a\x04\x53\x79\x67\xc6\x6f\xde\xfe\xc6\x5a\x6b\xc5\xd9\x7d\x86\x14\x97\xa2\xa1\x69\xa7\x8e\x2e\xee\x0d\x7d\x82\x4c\xce\xe2\xb5\xb5\xa9\xc5\xaa\x02\x2a\xef\xb9\xb2\x51\x44\x91\x03\x0c\x1d\xe0\x83\xb6\x29\x56\x49\xde\x43\xce\xf9\x92\xd9\xc2\xd0\xb1\x8d\xd0\xe5\xb1\x54\x04\x75\x3d\x42\x46\xb6\x03\xb7\x7a\x48\xe2\x7e\x70\x75\x29\x0e\xc7\xbb\x32\xb8\xb4\x9d\x76\x23\x2a\xcf\x0e\xde\xfa\x56\x2a\xe4\x3e\x79\x3c\x63\xbc\x34\x8f\xd2\xcb\x9a\x38\xbb\xf7\x92\x5a\x3e\x7d\xf6\xc4\xe6\xc5\xe6\x74\x12\x94\xd4\xc4\xe2\xa6\x30\x41\xc6\x8b\xe4\x7f\xf0\xfc\xc6\xc5\xbd\x8b\x0f\xcf\xb0\x5e\xda\xf8\x1d\xb6\x16\xa3\x34\x3d\x09\xff\xaf\x91\x4b\xf2\xb8\xc7\xb7\x3e\xf2\x96\xe5\xba\xda\x0c\xee\x0f\xff\x7b\x43\x86\x73\x2e\xdb\xdf\xaf\xe6\x1d\xb2\x4f\x8f\x01\xff\xf6\x62\x88\x3c\x8f\xf0\xe7\x8d\x70\xce\x4f\x30\xcb\xb0\xbd\x2c\xc8\xde\x59\x2e\x86\x76\x8a\xa8\xc0\xc3\xd6\x24\xbf\x2e\x06\xae\xf6\xf0\x61\xa1\xb4\xa2\x45\x54\x11\xb2\xe7\x8a\xf3\xbd\x85\xf3\x1e\xfe\x42\x62\x55\x84\x68\x36\x75\x3a\x5f\xac\xf0\xe3\x0a\x80\x1e\x3d\xc1\x2e\x42\x16\x23\xf4\x2a\xb2\x39\x5c\xe0\x07\x18\x12\x8e\xf6\x00\xd9\x5e\x35\x9a\xe9\xe5\x70\x37\xbc\x5a\xf4\xdb\x14\x02\xf7\x15\x7d\xd9\x5c\xf5\x6e\xbe\xaa\x9f\x01\x00\x00\xff\xff\xc3\xc4\x36\x41\x06\x04\x00\x00")

func infraStackHelmControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackHelmControllerYaml,
		"infra-stack/helm-controller.yaml",
	)
}

func infraStackHelmControllerYaml() (*asset, error) {
	bytes, err := infraStackHelmControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/helm-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraStackLocalPathProvisionerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xa6\x6a\x2e\x2d\x96\x76\xdc\x1e\xd2\x72\xd1\x83\x37\x76\xb6\x01\x12\xdb\x88\xd3\xf6\x10\x2c\x0c\x8a\x1a\xdb\xdc\x50\x24\x41\x52\xce\x7a\xd3\xbc\x7b\x41\x51\x76\x24\xc7\x49\x1c\xb4\xbd\xad\x2e\x02\x87\xf3\xcd\xff\x0f\x99\x11\x7f\xa2\x75\x42\x2b\x0a\xab\x5e\x72\x2b\x54\x4e\x61\x8a\x76\x25\x38\xf6\x39\xd7\xa5\xf2\x49\x81\x9e\xe5\xcc\x33\x9a\x00\x28\x56\x20\x05\xa9\x39\x93\xc4\x30\xbf\x24\xc6\xea\x95\x08\x78\xb4\xc4\x45\x1c\x61\x35\x30\xb2\x3b\xc3\x38\x52\xb8\x2d\x33\x24\x6e\xed\x3c\x16\x09\x21\x24\x69\x6a\xb6\x19\xe3\x1d\x56\xfa\xa5\xb6\xe2\x2b\xf3\x42\xab\xce\xed\x2f\xae\x23\x74\x77\xd5\xcb\xd0\xb3\x8d\x61\xa7\xb2\x74\x1e\xed\x95\x96\x78\xb8\x55\x36\x70\xdb\x52\xa2\xa3\x09\x01\x66\xc4\x47\xab\x4b\xe3\x28\xdc\xa4\xe9\xa7\x04\xc0\xa2\xd3\xa5\xe5\x58\x51\x94\xce\xd1\xa5\xef\x20\x35\xc1\x36\xe7\x51\xf9\x95\x96\x65\x81\x5c\x32\x51\x54\x37\x5c\xab\xb9\x58\x14\xcc\xb8\x0a\xbe\x42\x9b\x55\xd0\x05\xfa\x70\x2d\x85\xab\xfe\x77\xcc\xf3\x65\xfa\xe9\x75\x95\xa8\x72\xa3\x85\xf2\x7b\xd5\x46\xa2\xce\x77\x74\xfd\x78\x90\xe0\x15\x06\xa9\x2d\x20\xb7\xc8\x3c\x56\x42\xf7\xdb\xe7\xbc\xb6\x6c\x81\x75\xfc\x9f\x0a\xad\xef\xb9\x64\xce\xe1\x81\x11\xf8\xf7\xd9\xfe\x20\x54\x2e\xd4\xe2\xf0\xa4\x67\x42\xe5\x49\xc8\xfc\x15\xce\x03\xf3\xc6\xc7\x17\xb4\x27\x00\x4f\xab\xec\x90\xda\x72\x65\xf6\x19\xb9\xaf\xca\x6b\x6f\x03\xfd\x5f\x6d\xc3\x8c\x71\xdd\x6d\xd7\x0e\xd0\x48\xbd\x2e\xf0\x0d\x1d\xfb\xbc\x2a\x67\x90\xd3\x2a\xf7\x46\x0a\xce\x1c\x85\x5e\x02\xe0\x50\x22\xf7\xda\x86\x1b\x80\x22\xe4\xf7\x82\x65\x28\x5d\x24\x84\x30\x9b\x17\x74\x79\x2c\x8c\x64\x1e\x6b\x78\xc3\xc8\xf0\xc9\x96\xa4\xd7\x64\x01\x6c\x4c\x0c\x9f\xb1\x42\x5b\xe1\xd7\xa7\xa1\x2c\x47\x95\xc7\x69\xf4\x84\x84\x8e\x26\xdc\x0a\x2f\x38\x93\x69\xcd\xef\x5a\x09\x1a\xbd\x2d\x3b\xe1\xf3\x5a\xa2\xad\xaa\xa7\x61\x31\x00\x81\x5b\x5c\x53\x48\x4f\x6b\x7d\xfd\x3c\xd7\xca\x8d\x95\x5c\xa7\x0d\x2e\x00\x6d\x02\x5a\x5b\x0a\xe9\xf0\x8b\x70\xde\xa5\x7b\x84\x54\x96\x87\x0a\xeb\x84\xcc\x58\x85\x1e\xab\x2e\xe1\x5a\x79\xab\x25\x31\x92\x29\x7c\x83\x5c\x00\x9c\xcf\x91\x7b\x0a\xe9\x48\x4f\xf9\x12\xf3\x52\xe2\x5b\x14\x17\x2c\xf4\xc5\x7f\xa5\x31\xb8\xc1\x84\x42\xbb\x8d\x20\x79\xad\x58\xe3\x27\x0a\xb6\x40\x0a\x96\x29\xbe\x44\xdb\xdd\xcf\x4d\x57\xc7\x9d\xe3\x4e\xef\xd7\x36\x6a\x52\x4a\x39\xd1\x52\xf0\x35\x85\xf3\xf9\x48\xfb\x89\x45\x87\xdb\xac\x06\xa3\x8a\x82\xa9\xfc\x31\xa7\xe4\x35\x6b\x08\x38\xcf\xac\x6f\x9c\x09\x89\x2b\xa2\x41\xea\xa2\xe7\xdd\x48\xad\x7f\x9d\xcf\x4e\xab\x2d\x47\x1c\xf6\x97\xa1\xc0\x5c\x53\x77\x8c\x47\x44\x90\xc8\xd4\x08\x6f\x11\xf8\x27\xcc\x2f\x69\x4b\xc1\x96\x03\xd5\xea\xa9\xb0\xc9\x78\x30\x1b\xf5\x2f\x87\xd3\x49\xff\x74\xd8\x10\xb6\x62\xb2\xc4\x33\xab\x0b\xda\x4a\xe0\x5c\xa0\xcc\xeb\x21\xfa\x84\x1e\x75\x6f\x1a\xb9\xb3\x9d\x25\x49\xd3\xab\x37\x38\x14\xe9\x97\xcc\xb4\xb5\x3d\xa9\x8a\x3a\xbe\xbb\xf3\xb0\xbd\xbb\x1e\x27\xe3\x34\xd2\xab\xe1\xf0\xe2\x6c\x0c\x8b\x42\x29\xed\x9b\x8d\xdd\x5c\x78\x3b\xfd\x20\x1c\xc9\x71\xce\x4a\xe9\x49\x75\x4d\x21\xf5\xb6\xc4\x34\x69\xd6\xe1\xa6\x4e\x03\xa0\xa1\x29\xfa\x5e\xef\xb5\x4b\x9d\x23\x85\xbf\x98\xf0\x67\xda\x9e\x09\xeb\xfc\xa9\x56\xae\x2c\xd0\x26\x36\xbe\x3c\x36\x45\x3b\x40\x89\x1e\x2b\xcf\xeb\x65\xb5\x09\x59\xb2\xf3\x94\x7b\x71\x07\x6c\x0b\xf4\x99\xf1\xbf\x01\x36\x6a\x95\xc2\xdf\xa4\x0a\xc8\x7d\x9d\x9b\x6a\x4c\x84\x0a\xb8\x64\x26\xa5\x37\x35\xf5\x7e\x9b\xb9\xea\x3e\xa5\xe9\x60\x78\xd6\xff\xe3\xe2\x7a\x36\xe9\x5f\xff\x3e\x3b\x1b\x5f\xcd\x46\xe3\xd1\xec\xe2\x7c\x7a\x3d\x1c\xcc\x46\xe3\xc1\x70\x9a\xbe\x7b\xc4\x04\xeb\x5c\x4a\x6f\xd2\xae\x36\xbe\xcb\x84\xae\x5f\x59\xe1\x7b\xa8\xff\xf1\xfc\x50\xed\x23\x1f\x56\x7a\x6d\xd8\xf7\xdf\x75\x33\xa1\xba\x6e\x59\x9d\xee\x96\x42\x22\x2c\xd0\x6b\xe3\x1d\xa4\x05\x75\xd4\xd0\x14\xb4\x89\xad\x9a\xeb\xc7\x9e\x67\x0e\xe1\x48\x1b\x0f\x42\xb5\xea\xce\xfc\xd0\x3a\xb2\xcc\x69\x59\xfa\xca\xe7\xdf\x8e\xc6\x93\xeb\xfe\xd5\xc7\x16\xc3\xfb\xf7\xad\xa3\x6b\xc3\x9d\xf8\x8a\xe7\xea\xc3\xda\xa3\x3b\x04\x5d\xb4\xd1\x2b\x2d\x43\x95\xbc\x86\x44\xc7\x78\xed\x9f\x8a\x9d\x55\xdc\xe6\xc2\x02\x29\xe0\xf8\xe4\xe4\x04\x88\x81\xa3\xfb\xa6\x23\x0f\xd5\x5e\x66\x36\xd7\x77\xea\x5b\x24\x5f\x8c\xa4\x2d\x80\xd8\xf9\x9e\xf8\x2d\x51\x1a\xb4\x13\x9d\x77\xd6\xac\x90\xdb\x28\xee\x34\x64\x20\xc5\x9e\x9d\xe8\x7c\xef\x0b\x28\xb6\x69\x94\x46\x4c\xcd\xd4\x7c\xe6\x3c\xbf\x32\x77\x40\xb0\x67\x4d\x8a\xcc\x32\xbb\x26\x59\xe9\xd6\x99\xfe\x42\x7b\x9d\x9f\x7f\xea\xf4\x92\x7f\x02\x00\x00\xff\xff\xd5\xf6\xe3\x1f\x01\x0e\x00\x00")

func infraStackLocalPathProvisionerYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackLocalPathProvisionerYaml,
		"infra-stack/local-path-provisioner.yaml",
	)
}

func infraStackLocalPathProvisionerYaml() (*asset, error) {
	bytes, err := infraStackLocalPathProvisionerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/local-path-provisioner.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraStackNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x80\x40\x08\x05\xd0\x9e\x29\x58\xc0\xc2\x96\x21\x2c\xed\x7f\xbc\x5f\x10\x03\x77\x11\x62\xe2\xf6\x3e\x2c\x3f\xf9\x94\xcf\x34\x7d\x77\xb9\x3d\x87\xe9\x81\x60\x2d\x5c\x94\x60\x63\xa0\x61\xa2\x9a\x08\x9a\xce\x95\xbe\xd5\x57\xcd\x90\x3f\x00\x00\xff\xff\xc4\xa4\xc4\xe0\x3d\x00\x00\x00")

func infraStackNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackNamespaceYaml,
		"infra-stack/namespace.yaml",
	)
}

func infraStackNamespaceYaml() (*asset, error) {
	bytes, err := infraStackNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackMinioYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xcd\x6a\x02\x41\x0c\xc0\xf1\xfb\x3c\x45\x58\xf0\xe8\x2e\xbd\xce\xad\x0c\x03\x5d\xa4\x0a\x6e\x11\x7a\x92\x10\x43\x77\xe8\x7c\x31\x09\x82\x6f\x5f\x46\x2c\xad\xc7\xc0\x2f\xf9\x07\x6b\x38\x71\x93\x50\xb2\x85\x95\x63\x1a\x09\x55\x23\x8f\xa1\x4c\xd7\x17\xf3\x1d\xf2\xc5\xc2\x1b\xc7\xe4\x56\x6c\x6a\x12\x2b\x5e\x50\xd1\x1a\x80\x8c\x89\x2d\xa4\x90\x43\x81\xc7\x28\x15\x89\x2d\x94\x9a\xc3\x56\x6e\xa2\x9c\x8c\x54\xa6\xae\xa9\xef\x3f\xb8\x01\x68\x5c\x8b\x85\x55\xb5\x8a\x9d\xa6\x7b\x38\x85\xdc\xab\x06\xe0\xfa\xfb\xd0\xb0\x79\x9f\xf7\xf3\xe1\x7c\xf2\xc7\x65\x3e\xec\x37\x83\x01\x10\xd6\x7e\x0f\x00\x89\x58\x64\xc7\xb7\x3f\xf7\xea\x9c\x5f\x96\xf3\xce\x7f\xde\x69\xc7\xd4\x58\x9f\xcc\xe2\xdd\xd1\x7f\xfc\x33\xb5\xd7\x44\x39\x13\x8f\xa2\xa5\xe1\x17\xbb\x88\x22\x16\x86\x58\x08\xe3\xb6\xa2\xae\xc3\x4f\x00\x00\x00\xff\xff\xca\xd0\x92\xa7\x28\x01\x00\x00")

func opniStackMinioYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackMinioYaml,
		"opni-stack/minio.yaml",
	)
}

func opniStackMinioYaml() (*asset, error) {
	bytes, err := opniStackMinioYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/minio.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xcb\x6a\xeb\x30\x10\xc6\xf1\xbd\x9e\x62\x30\x78\x79\x64\xce\x56\x3b\xe1\x14\x5a\x48\x1b\x13\x97\x5e\x56\x61\x22\x0f\x58\x54\x37\x34\xe3\xb6\x79\xfb\xe2\xc6\x34\x3b\x89\xff\xef\x1b\x2c\xfe\x85\x2a\xfb\x9c\x0c\xcc\x14\xa2\x76\x28\x12\x48\xfb\xdc\x7d\xfe\x57\x1f\x3e\x4d\x06\xee\x29\xc4\x7e\xc6\x2a\x2a\x92\xe0\x84\x82\x46\x01\x24\x8c\x64\x20\xa1\x30\x6c\x3f\x2e\xe8\xc8\x40\x2e\xc9\xff\xe3\x0b\x0b\x45\xc5\x85\xdc\x8a\xdd\x3a\xbf\x6a\x05\x50\xa9\x64\x03\xb3\x48\x61\xd3\x75\xbf\x8d\xf5\xd9\x4b\xc2\xe8\xb5\xcb\xb1\xdb\xde\x0a\x80\x49\xd6\x3d\x00\x2e\x32\x6b\x4a\x78\x0e\x34\x19\x68\xa4\x2e\xd4\xdc\x42\x41\xe6\xaf\x5c\xd7\xd2\x3e\xd9\xe7\xf1\x34\xd8\x71\x7c\x3d\x1c\x77\xed\x15\x55\x2a\xc1\x3b\xec\xf3\x92\xe4\xcf\x1c\xef\x86\xfd\x43\x6f\xc7\xcd\x44\xfc\x1e\xf0\x12\x32\xde\xae\x3c\xda\xb7\xd3\x60\xdf\xf7\x07\xbb\x6b\x9b\x9f\x00\x00\x00\xff\xff\x28\xb0\x7f\x2e\x2b\x01\x00\x00")

func opniStackNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackNatsYaml,
		"opni-stack/nats.yaml",
	)
}

func opniStackNatsYaml() (*asset, error) {
	bytes, err := opniStackNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/nats.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackOpendistroEsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\x3f\x6b\xf3\x30\x10\x06\xf0\x5d\x9f\xe2\x10\x78\x8c\x5f\xde\x55\x5b\x70\x0c\xe9\x12\x07\xcb\x6d\x47\x73\x95\x8f\x5a\x54\xff\xd0\x5d\x5a\xfa\xed\x8b\xc1\x5b\x33\x34\xab\x78\x7e\x7a\xee\x0e\x8b\x7f\xa1\xca\x3e\x27\x03\x2b\x85\xd8\x3a\x14\x09\xd4\xfa\xfc\xef\xf3\xbf\xfa\xf0\x69\x31\x70\xa6\x10\xbb\x15\xab\xa8\x48\x82\x0b\x0a\x1a\x05\x90\x30\x92\x01\x9d\x0b\xa5\xc5\xb3\xd4\x7c\x20\xd6\xfb\x3b\x17\x74\x64\x20\x97\xe4\x0f\xfc\xcd\x42\x51\x71\x21\xb7\x31\xb7\x7d\xd4\xe5\x24\x94\xc4\x40\x33\x5c\xfb\xcb\xe9\xc9\x4e\xe3\x30\xf7\x76\xee\xce\xc7\x71\x9a\xbb\xe1\x32\xf5\x97\xa9\x51\x00\x4c\xb2\x21\x00\x0a\xc8\xe2\x1d\x13\x56\xb7\xb6\x11\x59\xa8\xb6\x65\x9b\x9c\x85\x92\xa3\x96\x12\xbe\x05\x5a\x0c\x68\xa9\x37\xd2\x7f\x43\x2c\xb9\xe2\x3b\x75\x01\x99\x0d\xe8\x90\x1d\x86\x43\x41\x59\xef\xf9\x6d\xf1\x07\x2b\x7f\x91\x87\x0a\x6f\x4c\x75\xbf\x72\xd3\xdb\xf9\xd9\xf6\x63\x73\x2f\x57\x90\xf9\x2b\xd7\x65\xcf\x5d\x8f\xd6\xbe\x0e\xe3\xa9\xd1\x4a\xfd\x04\x00\x00\xff\xff\xf5\x2b\x61\x57\xdf\x01\x00\x00")

func opniStackOpendistroEsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackOpendistroEsYaml,
		"opni-stack/opendistro-es.yaml",
	)
}

func opniStackOpendistroEsYaml() (*asset, error) {
	bytes, err := opniStackOpendistroEsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/opendistro-es.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackRancherLoggingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\x3d\x0e\xc2\x30\x0c\x46\x77\x9f\xc2\xea\x9e\xb4\x08\x16\xbc\xb2\x70\x02\x76\x2b\xb5\x9a\x88\xfc\x29\xb1\x2a\x71\x7b\x54\x54\x46\x96\x8a\xd9\xdf\xb3\xde\xe3\x1a\x1e\xd2\x7a\x28\x99\xd0\x4b\x4c\xd6\xb1\x6a\x14\x1b\xca\xb8\x9e\xe0\x19\xf2\x4c\x78\x97\x98\x6e\x9e\x9b\x42\x12\xe5\x99\x95\x09\x10\x33\x27\x21\x6c\x9c\x9d\x97\x66\x62\x59\x96\x90\x17\xe3\xda\xbc\xdf\x7a\x65\x27\x84\xa5\xe6\x60\xfa\xab\xab\x24\xe8\x55\xdc\x86\xba\xed\xd9\x2f\xb6\x49\x2d\x84\x5e\xb5\xd2\x38\x7e\x96\xdd\xee\xcb\xcd\x0a\x10\xd7\xaf\xf0\x70\xb6\x57\x7b\x99\xa6\x01\x8c\x31\xf0\xe7\x14\x3c\xda\x71\xb0\xe1\x1d\x00\x00\xff\xff\x04\xc5\xc9\x53\x8a\x01\x00\x00")

func opniStackRancherLoggingYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackRancherLoggingYaml,
		"opni-stack/rancher-logging.yaml",
	)
}

func opniStackRancherLoggingYaml() (*asset, error) {
	bytes, err := opniStackRancherLoggingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/rancher-logging.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackTraefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xcd\xaa\xc2\x40\x0c\x85\xf7\xf3\x14\xa1\xd0\xe5\x6d\xb9\xdb\xec\x44\x2a\x16\x41\xa1\x4a\xb7\x12\xa6\x91\x0e\xed\xfc\x30\x09\x05\xdf\x5e\x2a\x55\xb7\xc9\x77\xce\x77\x28\xb9\x9e\xb3\xb8\x18\x10\x46\x9e\x7d\x65\x49\x75\xe6\xca\xc5\x7a\xf9\x37\x93\x0b\x03\xc2\x91\x67\xbf\x1f\x29\xab\xf1\xac\x34\x90\x12\x1a\x80\x40\x9e\x11\x34\x13\x3f\xdc\x04\xdb\x41\x12\x59\x46\x88\x29\xb8\x3f\x79\x8a\xb2\x37\x92\xd8\xae\xbc\x5d\x1b\xbe\x01\x03\x90\x39\x45\x84\x51\x35\x09\xd6\xf5\x5b\xbe\x3d\x57\xfb\x8f\x5b\x3e\xfb\x8a\xf2\xd6\xed\x9a\x43\x7b\xba\xf7\x4d\x77\x6d\x2f\xe7\xb2\x78\x05\x00\x00\xff\xff\x08\x35\xda\x6e\xbf\x00\x00\x00")

func opniStackTraefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackTraefikYaml,
		"opni-stack/traefik.yaml",
	)
}

func opniStackTraefikYaml() (*asset, error) {
	bytes, err := opniStackTraefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesDrainServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4b\x8f\xda\x30\x10\xc7\xef\xf9\x14\x23\xa4\xdc\xc8\x63\x51\x2f\xf5\xa9\x11\xa4\x12\x2a\x05\x94\xd0\xad\x7a\x8a\x66\xcd\x74\x71\xeb\x97\x6c\x93\x2a\xdf\xbe\x72\x59\xd8\x65\x79\x74\x2e\x48\xfe\xcf\xcc\xef\x37\x04\xad\x78\x24\xe7\x85\xd1\x0c\xd0\x5a\x5f\xf4\x0f\xc9\x6f\xa1\xb7\x0c\x66\x64\xa5\x19\x14\xe9\x90\x28\x0a\xb8\xc5\x80\x2c\x01\xd0\xa8\x88\xc1\xd6\xa1\xd0\x99\x27\xd7\x0b\x4e\x2f\xaf\xde\x22\x27\x06\xc6\x6a\x91\xf9\xc1\x07\x52\x89\xb7\xc4\xe3\x90\x23\x2b\x05\x47\xcf\xe0\x21\x01\xf0\x24\x89\x07\xe3\x62\x02\xa0\x30\xf0\xdd\x02\x9f\x48\xfa\xc3\x03\x44\x91\x4b\x44\x20\x65\x25\x06\x7a\x99\x7a\xa3\x14\x4b\x9e\x2d\xb8\xb1\x02\xe0\x28\x14\x8b\x1b\x1d\x50\x68\x72\xa7\xb1\xec\xc6\x75\x87\x12\x0a\x9f\x89\x81\x47\xfd\x0b\x07\x87\x9a\xef\xc8\x15\x67\xad\xac\x2f\xf3\xf2\xbc\x7f\xbd\x97\x72\x6d\xa4\xe0\x03\x83\x4a\xfe\xc1\xc1\x9f\x72\xd2\xfd\xab\xef\x11\xbd\xac\x36\x6d\xd7\xd6\xcd\x63\xdd\x74\xdf\x9a\xc5\x29\x07\xe8\x51\xee\x89\xc1\x48\x63\xf0\xac\x28\xe2\x4f\xc7\xa5\x20\x1d\x58\xfa\x6f\x6a\x5d\xb5\xed\xf7\x55\x33\x4b\x3f\xc5\x2c\x3b\x64\xf9\x9b\xcf\x91\xfb\x9e\xb3\x0f\x93\xc9\x64\x74\x81\xad\xdb\xae\x5e\xce\xd6\xab\xf9\x72\x73\x05\xb9\x0b\xc1\x46\xa6\xb1\xa4\xb7\xc2\x07\x67\x32\x3a\x02\x8e\xb7\xbf\x07\xe5\x5c\xee\x7d\x20\x97\x4b\xc3\x51\xb2\x8f\x93\xb2\xbc\xc4\x7e\xae\xe6\x8b\xee\x4b\xfd\x23\x6a\xb7\x57\xc0\x3f\x51\xc8\x31\x39\x67\xdc\x58\x09\xef\x85\x7e\x1e\xef\x35\x3e\x49\xba\x5c\xf5\x75\xbe\x9c\xaf\xee\xff\x73\xf1\x0c\x56\x14\x4a\x68\x61\xfe\xa7\x5b\x5e\xd3\x3d\x30\xaa\xe9\xb4\x6e\xdb\xa8\x7d\x85\x91\xbe\xef\x49\x6f\xab\x4e\x9b\x7a\x73\x7f\xcd\x6b\x4f\x3a\xfa\x1b\x00\x00\xff\xff\xbb\xca\x12\xbb\xaa\x03\x00\x00")

func servicesDrainServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesDrainServiceYaml,
		"services/drain-service.yaml",
	)
}

func servicesDrainServiceYaml() (*asset, error) {
	bytes, err := servicesDrainServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/drain-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNulogInferenceServiceControlPlaneYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6f\xda\x30\x14\xc7\xef\x7c\x8a\x27\x24\x8e\x49\x80\xb5\x9b\xe6\xd3\x10\x58\x2d\x6a\x96\xa0\x38\xeb\xb4\x53\xe4\xba\x6f\xad\x35\xc7\xf6\x6c\x27\x5b\xbe\xfd\x94\xb6\x14\x28\x61\x6d\x7d\x41\x7a\x7f\xbf\xdf\xcf\xcf\xc4\xdc\xca\x6b\x74\x5e\x1a\x4d\x80\x5b\xeb\x93\x76\x36\xfa\x25\xf5\x2d\x81\x15\x5a\x65\xba\x1a\x75\x18\xd5\x18\xf8\x2d\x0f\x9c\x8c\x00\x34\xaf\x91\x80\x6e\x94\xb9\x8b\xa4\xfe\x89\x0e\xb5\xc0\xc8\xa3\x6b\xa5\xc0\x48\x18\x1d\x9c\x51\x91\x55\x5c\xe3\xd3\x6e\x6f\xb9\x40\x02\xc6\x6a\x19\xf9\xce\x07\xac\x47\xde\xa2\xe8\x61\x0e\xad\x92\x82\x7b\x02\xb3\x11\x80\x47\x85\x22\x18\xd7\x27\x00\x35\x0f\xe2\x3e\xe5\x37\xa8\xfc\x63\x01\xfa\x03\xbe\x5d\x1d\xb0\xb6\x8a\x07\x7c\xa2\xed\x8d\xd0\x2f\x75\x00\x7e\x27\x1a\x60\x3b\x40\xbf\xfa\x94\x4b\x8d\xee\x19\x17\xbd\xf3\x96\x1e\x97\xac\xf9\x1d\x12\x08\xdd\x0d\x57\xf8\x37\x79\x53\x33\x69\xa7\xf1\xec\x90\xb0\x69\x94\xda\x18\x25\x45\x47\x60\xa1\xfe\xf0\xce\x3f\xe7\xa8\xdb\xdd\xc4\xdb\x43\x66\x8b\x92\x55\x8c\x16\xd7\xb4\xa8\xbe\x15\xe9\x73\x0e\xd0\x72\xd5\x20\x81\xb1\xe6\xc1\x93\x24\xe9\x7f\x2a\xa1\x24\xea\x40\x26\x0f\x5d\x9b\x05\x63\xdf\xf3\x62\x35\xf9\xd2\x67\xd1\x63\x16\xef\xfd\xd1\xb1\x6f\x05\x39\x9b\xcf\xe7\xe3\x23\x2d\x65\x15\xcd\x56\x9b\x7c\x9d\x95\x03\xca\xfb\x10\x6c\xef\x34\x16\xf5\xad\xf4\xc1\x99\x08\xb7\x82\xed\x4d\xbc\x14\xc5\x42\x35\x3e\xa0\x8b\x95\x11\x5c\x91\xcf\xf3\xe9\xf4\x58\xfb\x75\x9d\xad\xf3\xd7\xcc\x24\x49\x6a\xa9\xa5\x79\xcd\x30\x3d\x6d\x58\x2c\x97\x94\xb1\xea\x8a\xfe\x18\x70\x4c\x5e\xee\x99\x9c\xc2\x30\xba\x2c\x68\xf9\x7f\xcc\x6e\xcf\x10\x26\x5f\xd1\xb4\x2a\x2f\x0b\xca\x2e\xf3\x74\x35\x40\x99\xc6\x1f\x07\xed\x55\x9a\x5f\x54\x65\x7e\x45\x33\x36\xd0\x75\x76\xdc\xb3\x66\xd5\x32\xcf\xca\x22\x4f\xab\x4d\xba\xc8\xe8\xc3\x47\xb5\x5e\xd2\x81\xee\xd2\x35\xb8\x03\x38\xf4\xa6\x71\x02\xf7\x9e\x23\x80\x92\xb5\x0c\x07\x95\xfe\x11\xd7\xc6\x75\x04\xe6\x17\xf2\xa0\x2e\x6c\x43\x60\xfc\x29\x3e\x1f\xef\x95\x1d\xfe\x6e\xd0\x9f\x42\xcc\x06\x11\x1f\xe2\xf3\xf1\xbf\x00\x00\x00\xff\xff\x0b\xbc\xda\x47\x12\x05\x00\x00")

func servicesNulogInferenceServiceControlPlaneYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNulogInferenceServiceControlPlaneYaml,
		"services/nulog-inference-service-control-plane.yaml",
	)
}

func servicesNulogInferenceServiceControlPlaneYaml() (*asset, error) {
	bytes, err := servicesNulogInferenceServiceControlPlaneYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nulog-inference-service-control-plane.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNulogInferenceServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7e\x8a\x41\x00\x2f\x25\xd9\xc6\xbd\x8b\x72\x55\xc3\x26\x1a\x23\xaa\x64\x88\x6a\x8a\xae\x04\x86\x9e\x3a\x44\xf9\x07\x92\x52\xab\xb7\x2f\x54\xc7\x8e\x9d\xc8\xf1\x6c\x04\xcc\x99\x73\xbe\x19\x08\xe4\x4e\x3e\xa2\x0f\xd2\x1a\x02\xdc\xb9\x90\x75\xf3\xc9\x2f\x69\x76\x04\xd6\xe8\x94\xed\x35\x9a\x38\xd1\x18\xf9\x8e\x47\x4e\x26\x00\x86\x6b\x24\x60\x5a\x65\xf7\x89\x34\x3f\xd1\xa3\x11\x98\x04\xf4\x9d\x14\xf8\xa2\x07\xc7\x05\x12\xb0\xce\xc8\x24\xf4\x21\xa2\x9e\x04\x87\x62\xb0\x7b\x74\x4a\x0a\x1e\x08\xcc\x27\x00\x01\x15\x8a\x68\xfd\xa0\x00\x68\x1e\xc5\x73\xce\x9f\x50\x85\x43\x03\x86\x95\x3e\x82\x45\xd4\x4e\xf1\x88\x2f\xfe\xb3\x35\x87\x52\x17\x51\x37\xc3\x00\x8e\x4b\x0e\x25\xac\x89\x5c\x1a\xf4\xa7\x80\xe4\xe6\xed\x87\x92\x9a\xef\x91\x40\xec\x9f\xb8\xc2\x3f\xd9\x95\x71\xd2\xcd\xd2\xf9\xa5\x67\xdb\x2a\xb5\xb5\x4a\x8a\x9e\xc0\x52\xfd\xe6\x7d\x38\xe9\x68\xba\xd7\x3b\x8e\x8b\x14\xcb\x9a\x35\x8c\x56\x8f\xb4\x6a\xbe\x55\xf9\x49\x07\xe8\xb8\x6a\x91\xc0\x9d\xe1\x31\x90\x2c\x1b\x3e\x8d\x50\x12\x4d\x24\xd3\x7f\xae\xed\x92\xb1\xef\x65\xb5\x9e\x7e\x1e\xb4\xe4\xa0\xa5\x67\x3f\x2c\x0d\x9d\x20\xff\x2d\x16\x8b\xbb\x77\x58\xca\x1a\x5a\xac\xb7\xe5\xa6\xa8\x47\x90\xcf\x31\xba\x81\x69\x1d\x9a\x9d\x0c\xd1\xdb\x04\x8f\x80\xe3\xed\x6f\x41\xa9\x50\x6d\x88\xe8\x53\x65\x05\x57\xe4\xd3\x62\x36\x7b\x8f\xfd\xba\x29\x36\xe5\x2d\x32\xc9\x32\x2d\x8d\xb4\xb7\x08\xb3\xeb\x84\xe5\x6a\x45\x19\x6b\x1e\xe8\x8f\x11\xc6\xf4\xed\xcc\xf4\x5a\x0c\xa3\xab\x8a\xd6\x1f\xc7\xbc\xce\x8c\xc5\x94\x6b\x9a\x37\xf5\x7d\x45\xd9\x7d\x99\xaf\x47\x52\x66\xe9\xff\xa3\xf4\x26\x2f\xbf\x34\x75\xf9\x40\x0b\x36\xe2\x3a\xf3\x78\x0c\xb6\xf5\x02\xcf\xde\x08\x80\x92\x5a\xc6\x8b\x0e\x80\xe9\xe4\x4e\xf2\x54\x58\x9d\xed\x5d\x4b\x60\xfe\x37\x00\x00\xff\xff\x63\xb6\x8b\x43\x37\x04\x00\x00")

func servicesNulogInferenceServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNulogInferenceServiceYaml,
		"services/nulog-inference-service.yaml",
	)
}

func servicesNulogInferenceServiceYaml() (*asset, error) {
	bytes, err := servicesNulogInferenceServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nulog-inference-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNvidiaPluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xd1\x6e\xdb\x36\x14\x7d\xd7\x57\x1c\xd8\x28\xd0\x02\x91\xd4\xf6\x69\x53\x9f\xbc\x24\xc3\x8c\xa6\x76\x61\xa7\x2d\x8a\x61\x18\xae\xc9\x6b\x89\x30\x45\x72\x24\x65\x47\x7f\x3f\x50\x56\x9c\xa8\x03\xd6\x3e\x0d\x98\x5f\x12\x88\xe7\xdc\x7b\x78\xee\x21\x39\xc7\xb5\x75\xbd\x57\x75\x13\xf1\x52\xbc\xc2\xdb\xd7\x6f\x7e\xbe\xc2\xea\xf3\xf2\x66\xb9\xc0\xf5\x7a\xf3\x71\xbd\x59\xdc\x2f\xd7\xab\x02\x58\x68\x8d\x01\x18\xe0\x39\xb0\x3f\xb2\x2c\xb2\x79\x36\xc7\x9d\x12\x6c\x02\x4b\x74\x46\xb2\x47\x6c\x18\x0b\x47\xa2\xe1\xc7\x95\x2b\x7c\x66\x1f\x94\x35\x78\x5b\xbc\xc6\xcb\x04\x98\x8d\x4b\xb3\x57\xef\xb2\x39\x7a\xdb\xa1\xa5\x1e\xc6\x46\x74\x81\x11\x1b\x15\xb0\x57\x9a\xc1\x0f\x82\x5d\x84\x32\x10\xb6\x75\x5a\x91\x11\x8c\x93\x8a\xcd\xd0\x66\x2c\x52\x64\x73\x7c\x1d\x4b\xd8\x5d\x24\x65\x40\x10\xd6\xf5\xb0\xfb\xe7\x38\x50\x1c\x04\xa7\x5f\x13\xa3\xab\xca\xf2\x74\x3a\x15\x34\x88\x2d\xac\xaf\x4b\x7d\x06\x86\xf2\x6e\x79\x7d\xbb\xda\xde\xe6\x6f\x8b\xd7\x03\xe5\x93\xd1\x1c\xd2\xc6\xff\xea\x94\x67\x89\x5d\x0f\x72\x4e\x2b\x41\x3b\xcd\xd0\x74\x82\xf5\xa0\xda\x33\x4b\x44\x9b\xf4\x9e\xbc\x8a\xca\xd4\x57\x08\x76\x1f\x4f\xe4\x39\x9b\x43\xaa\x10\xbd\xda\x75\x71\x62\xd6\xa3\x3a\x15\x26\x00\x6b\x40\x06\xb3\xc5\x16\xcb\xed\x0c\xbf\x2c\xb6\xcb\xed\x55\x36\xc7\x97\xe5\xfd\x6f\xeb\x4f\xf7\xf8\xb2\xd8\x6c\x16\xab\xfb\xe5\xed\x16\xeb\x0d\xae\xd7\xab\x9b\x65\x1a\xd4\x16\xeb\x5f\xb1\x58\x7d\xc5\xfb\xe5\xea\xe6\x0a\xac\x62\xc3\x1e\xfc\xe0\x7c\xd2\x6f\x3d\x54\xb2\x71\x18\x1d\xb6\xcc\x13\x01\x7b\x7b\x16\x14\x1c\x0b\xb5\x57\x02\x9a\x4c\xdd\x51\xcd\xa8\xed\x91\xbd\x51\xa6\x86\x63\xdf\xaa\x90\x86\x19\x40\x46\x66\x73\x68\xd5\xaa\x48\x71\xf8\xf2\x8f\x4d\x15\x59\x46\x4e\x8d\xe3\xaf\x92\x67\xa1\x3c\xbe\xc9\x0e\xca\xc8\x0a\x37\xc4\xad\x35\x5b\x8e\x59\xcb\x91\x24\x45\xaa\x32\xc0\x50\xcb\x15\xcc\x51\x49\x45\xb9\xe4\xa3\x12\x9c\x3b\xdd\xd5\xca\xe4\x72\x20\x04\x8e\x23\x2c\x38\x12\x5c\xc1\x3a\xa3\xf2\xd0\x87\xc8\x6d\x96\xb4\xa7\x2a\x81\x35\x8b\x68\x7d\xfa\x1f\x68\x29\x8a\xe6\x8e\x76\xac\xc3\xf9\xc3\xbf\xb7\x09\x19\xd0\x39\x49\x91\xb7\xd1\x53\xe4\xba\x3f\xb3\x62\xef\xb8\xc2\xc6\x6a\xad\x4c\xfd\x69\x00\x64\x40\xe4\xd6\x69\x8a\x3c\xb6\x7a\xb6\x95\xf4\x9b\xe3\x3e\xa5\x99\x8c\xb1\x67\x97\x86\x39\xb3\xf3\x2c\x28\xb2\x2c\xf0\x3e\x05\xbc\x61\x7f\xf6\x7f\x47\xe2\x70\x22\x2f\x87\xbc\x53\x54\x3b\xa5\x55\xec\x2f\xb5\xd2\xc8\x52\x74\x43\x55\x96\x87\x6e\xc7\xde\x70\xe4\x50\x28\x5b\x4a\x2b\x42\x19\x29\x1c\x42\x49\xb2\x55\x46\x85\xc8\x3e\x17\xba\x4b\x7f\xcb\xba\x23\x4f\x26\x32\xcb\x3c\x88\x86\x65\x97\x76\x90\x8b\x94\x51\x41\x3a\x27\x29\xad\xc9\x9d\x95\xa1\x1c\x5b\x3d\xe9\xbd\x38\x06\x8c\x54\xf6\x05\x69\xd7\x50\x31\x55\x70\xa9\xe6\xac\xac\x30\x9b\x8d\x34\x3d\xb1\xfd\xfb\xc6\x03\x8f\x33\x1c\x2c\xb7\x9a\xfd\x54\xc7\xe8\xe8\xd3\xca\xff\xc3\xd1\x1c\x07\xee\x2b\x5c\x8f\x88\x45\x02\x84\xb5\xd1\xfd\xc5\x19\xeb\xd2\x86\xac\xaf\x70\xfb\xa0\x42\x0c\x53\xe2\xd9\xb1\x42\xd8\xb6\xac\x5d\xf7\x3d\x12\xc0\xfb\x3d\x8b\x58\x61\x65\xb7\xe3\xd8\x2e\x7b\xfe\x40\xfe\x70\xbe\x64\x9d\x95\xa0\x90\xae\xcb\x51\x16\x48\xca\xdc\x9a\x77\x38\x35\x6c\xc0\x26\xdd\x6f\xf2\x6a\x38\xd2\xdf\x40\x2e\xd5\x2e\xa9\x78\x7c\x17\x86\x07\xc2\x76\x5e\x70\x18\x26\xf0\x0d\x31\x35\x0d\x08\x16\xb1\xa1\x98\x2a\xf7\x10\xf4\x54\x6e\xc7\x89\x3e\xd6\x94\xa0\x7d\x64\x0f\xc2\x9e\x94\xee\x3c\x17\xff\xfd\xe0\x9c\x57\xd6\xab\xd8\x5f\x6b\x0a\x61\x35\xa4\x77\x76\xbe\x6d\x72\x63\x25\x5f\xa8\x8f\x81\x17\xd6\xa4\x37\x88\xfd\x25\xb1\x39\x54\x4b\xf5\x25\xf5\xe5\xe1\xa7\x30\x4d\x7e\xf5\xe2\xfc\xe4\xfe\xf9\xf9\x76\xb3\x5d\xae\x57\x2f\x7e\xe4\xb4\x88\xe8\x9f\x4e\x26\x8b\x6e\xd0\x68\x4d\xe4\x87\xf8\x74\xda\x00\xd2\xda\x9e\x3e\x7a\x75\x54\x9a\x6b\xbe\x0d\x82\xf4\x70\x6a\x2a\xec\x49\x07\x7e\x86\x14\xe4\x68\x38\x1d\x8a\xc3\xf3\x0a\x80\xf4\xd6\x55\xf8\x7d\xb6\xb8\xbb\x9b\xfd\x71\x59\x39\x5a\xdd\xb5\xfc\xc1\x76\x26\x4e\xf0\xf9\xa8\x7a\x22\x77\x52\xaf\x4d\x9c\x8f\x14\x9b\x0a\xe5\x91\x7c\xa9\xd5\x6e\x98\xa1\xe6\x58\x4e\x58\x8f\x71\x3e\xb7\x7a\xd6\xe5\x7b\x3d\x1a\x1b\xce\x0d\x26\x7d\xdd\x8f\xb4\xfc\x3b\x00\x00\xff\xff\x1a\x6d\xa2\x75\x14\x09\x00\x00")

func servicesNvidiaPluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNvidiaPluginYaml,
		"services/nvidia-plugin.yaml",
	)
}

func servicesNvidiaPluginYaml() (*asset, error) {
	bytes, err := servicesNvidiaPluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nvidia-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesPayloadReceiverServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\x05\x7a\x54\x9c\x06\xdf\xe1\x83\x4e\x0b\xd0\x1e\x06\x14\x5d\x90\x6c\xdd\x31\x60\x14\xae\xd1\x22\x4b\x82\xc8\x78\xf3\xbf\x1f\x14\xdb\xaa\x8b\xa1\xc9\x06\x8c\x17\xcb\x20\xf9\xf8\x1e\xf5\x84\xd1\x3e\x53\x62\x1b\xbc\x86\xf6\xae\x3a\x5a\xbf\xd7\xb0\xa1\xd4\x5a\x43\x55\x43\x82\x7b\x14\xd4\x15\x80\xc7\x86\x34\x44\xec\x5c\xc0\xbd\x4a\x64\xc8\xb6\x94\x14\x0f\xa5\x7d\x01\x47\x34\xa4\x21\x44\x6f\x15\x77\x2c\xd4\x54\x00\x0e\x77\xe4\x38\x63\x00\x0c\xe5\x17\x80\x38\x92\xc9\xb5\x4c\x8e\x8c\x84\xd4\xf7\x61\x8c\x17\x87\xc7\x90\xe4\x3c\x42\x9d\x8f\x1a\xfe\x9f\x57\x4a\xa9\x6a\x2a\x0f\x63\xe4\xba\x68\xbc\xa7\xe8\x42\xd7\x90\x97\x7f\x22\x73\xa4\x9d\x28\x3a\x6b\x90\x35\xdc\xfd\x26\xa2\x41\x31\x87\xc7\xc9\x36\xae\xeb\x12\x6a\xa2\x43\xa1\x01\x60\x42\x34\x87\x7b\x83\x75\x1d\x0d\x60\xa4\x99\xc3\x04\x2f\x68\x3d\xa5\x82\xa0\xae\xcb\xef\xc3\x36\xf8\x42\x1a\x18\xfd\x77\xec\x12\x7a\x73\xa0\x54\xbf\xd7\xa5\xdb\xf9\x6c\xfe\xb6\x75\x75\x72\x6e\x15\x9c\x35\x9d\x86\xa5\xfb\x81\x1d\x97\x3c\xf9\xf6\x55\xd0\x48\xe8\x69\xf9\x79\xb3\xdd\x3c\xac\x9f\x1f\xd6\xdb\x2f\xeb\xc7\x92\x07\x68\xd1\x9d\x48\xc3\x8d\x47\x61\x5d\xd7\xf9\xb3\x35\xce\x92\x17\x7d\x7b\xee\x5a\x2d\x37\x9b\xaf\x9f\xd6\xf7\xb7\x1f\x72\x4e\xf5\xb9\xd9\xe4\xea\x66\xdc\x1a\xfd\xdf\x62\xb1\xb8\x29\xb0\xc5\x4d\x23\x8b\xb2\xaa\xd5\x7b\xe6\xa2\x9f\x42\x3e\x1f\xb3\xc5\x76\x24\x38\xfa\xec\xa3\x7f\x49\xc4\xfc\x17\x26\x53\x76\x68\xb9\xf0\xa6\xd0\xfb\x20\x28\x79\x5e\xcf\xf3\x78\xda\x51\xf2\x24\xc4\x33\x1b\xea\x01\x61\x66\x1c\x32\x6b\x90\x84\xf4\xcd\x1e\x5f\x4d\x7a\x72\x34\xbc\x96\x83\x48\x1c\x95\x46\x94\xc3\xc4\x0b\xf9\x57\x43\x5d\xd6\xb0\x43\x73\x24\xbf\xd7\x93\xed\x0f\x8c\x9f\xfe\xcc\x35\xa5\xbe\x6c\xb1\xfa\x15\x00\x00\xff\xff\xb2\x41\x19\xb7\x7f\x04\x00\x00")

func servicesPayloadReceiverServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesPayloadReceiverServiceYaml,
		"services/payload-receiver-service.yaml",
	)
}

func servicesPayloadReceiverServiceYaml() (*asset, error) {
	bytes, err := servicesPayloadReceiverServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/payload-receiver-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesPreprocessingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x43\xc0\x47\x49\x8e\xe9\xa5\x7b\xaa\xa9\x75\x28\x04\xc7\x48\x49\x7a\x34\xe3\xd5\x60\x6d\xb3\x9a\x5d\x76\xd6\x2a\xfa\xf7\x45\x89\xac\x3a\x46\xa6\x97\x92\xbd\x08\xf4\xf8\x66\xe6\xbd\x87\xde\xbc\x50\x10\xe3\x58\x01\x7a\x2f\x79\x77\x9f\xbc\x1a\xae\x15\x6c\xc8\x5b\xd7\xb7\xc4\x31\x69\x29\x62\x8d\x11\x55\x02\xc0\xd8\x92\x02\x1f\xc8\x07\xa7\x49\xc4\xf0\x31\x15\x0a\x9d\xd1\x34\xaa\xe2\x51\x93\x02\xe7\xd9\xa4\xd2\x4b\xa4\x36\x11\x4f\x7a\x80\x03\x79\x6b\x34\x8a\x82\xfb\x04\x40\xc8\x92\x8e\x2e\x0c\x0a\x40\x8b\x51\x37\x0f\x78\x20\x2b\xef\x3f\x60\x38\xe8\xf6\xaa\x48\xad\xb7\x18\x69\xa4\x2f\x4e\x1c\x9e\xfd\x30\xe8\x1f\xa3\x00\xce\x07\x0e\xcf\xb0\x89\xdf\x1d\x47\x34\x4c\x61\x1a\x91\x8e\xce\x5f\xcd\x01\x19\xd3\x1a\xa5\x39\x38\x0c\xf5\xb4\xc1\xb4\x78\x24\x05\xcd\x49\x84\x0c\x1f\xd1\xa2\xcd\xdf\x32\xb8\x26\x54\xb7\xcc\x96\x1f\xb1\xdd\xc9\xda\x9d\xb3\x46\xf7\x0a\xd6\xf6\x37\xf6\x32\xe9\xc4\xdd\x5f\x17\xe7\x23\x8a\x6a\x5f\x6c\x37\xbb\xc7\x1f\xdb\xa7\x49\x03\xe8\xd0\x9e\x48\xc1\x5d\x13\xa3\x17\x95\xe7\xce\x13\xd7\x46\x62\x70\x29\x49\xaa\xad\x21\x8e\x67\xd7\xd9\x45\x3d\x99\x74\x3a\xd3\xf6\x24\x91\x42\x66\x9d\x46\xab\xbe\xae\x96\xcb\xbb\xb9\xb5\xcf\x55\x51\xce\xac\x5c\x8c\xd2\x62\x16\xda\xad\xab\xea\xe7\x63\xb9\xb9\x01\x9e\xe5\x09\xd6\x37\xd3\xbf\xdd\xe0\x45\x05\x82\xfc\x0b\xfb\x80\xac\x1b\x0a\xf9\x2c\xf2\x1f\x3a\xd8\xae\x9f\xaa\x7d\x55\x94\x2f\x45\xb9\x7f\x2e\x1f\x66\xbc\x31\xc6\xa1\x86\xe1\xb3\x7f\x4f\x5f\x2d\xde\xa8\xc9\xf0\xb7\x41\x1b\x9b\xb9\x6e\x44\x7d\x59\xad\x56\xb3\x71\x7e\x46\xf5\x7f\x02\x00\x00\xff\xff\x43\x83\xb6\x68\x18\x04\x00\x00")

func servicesPreprocessingYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesPreprocessingYaml,
		"services/preprocessing.yaml",
	)
}

func servicesPreprocessingYaml() (*asset, error) {
	bytes, err := servicesPreprocessingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/preprocessing.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesTraining_controllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\x73\xe2\x38\x10\xbd\xfb\x57\xa8\xa8\xe2\x68\xf3\x51\x7b\xd8\xd5\x69\x1d\x50\xed\x92\x49\x0c\x65\x43\xa6\x66\x2e\x2e\x21\x77\x40\x89\x2c\xa9\x24\xd9\x29\xe6\xd7\x4f\x29\x80\x71\x82\x81\x5c\x46\x17\xa9\xd5\xea\xd7\xad\xf7\x1e\xd5\xfc\x09\x8c\xe5\x4a\x62\x54\x8f\x82\x57\x2e\x0b\x8c\x32\x30\x35\x67\x10\x33\xa6\x2a\xe9\x82\x12\x1c\x2d\xa8\xa3\x38\x40\x48\xd2\x12\x30\x72\x86\x72\xc9\xe5\x26\x64\x4a\x3a\xa3\x84\x00\x13\x9a\xf5\x21\x6d\x35\x65\x80\x91\xd2\x92\x87\x76\x67\x1d\x94\x41\x18\x86\x07\xe8\x89\xa8\xac\x03\x93\x2a\x01\x41\xbb\xb7\x59\x53\x16\xd1\xca\x6d\x95\xe1\xbf\xa8\xe3\x4a\x46\xaf\x7f\xdb\x88\xab\x41\x3d\xfa\xfa\x00\xa6\x12\x60\xfd\xab\x10\x51\xcd\xff\x33\xaa\xd2\xef\xa1\x5f\x21\xea\xf5\x4e\x47\xaa\xb5\x6d\x85\x6b\xea\xd8\x76\x1f\x1b\xb0\xaa\x32\x0c\x5a\x85\x20\x0b\xad\xb8\x74\xb6\xb9\x29\x40\x0b\xb5\x2b\xa1\x7d\xa7\x55\x71\x0a\x5e\xd4\x7a\x1f\xd4\x60\xd6\x2d\xa8\x0d\xb8\xe6\x2c\xb8\x3d\x05\x6f\x7e\x82\x26\x62\x06\xa8\x83\x56\x3b\x01\x0e\xba\x69\xbc\xe3\xb2\xe0\x72\xf3\x07\xd8\xb4\xd5\xfa\x05\x98\x3b\x10\xda\x69\x0d\x3f\xde\x0d\x4b\x5c\x34\x85\x51\x02\x52\x78\xf6\xe8\x47\xb1\xae\x4c\x1e\x20\x74\xee\xa0\x1b\xcd\x3d\x5f\x6d\x5a\xbc\xe8\x83\xc6\xe5\xd3\x46\xc3\xaf\x51\x72\xd9\xde\x56\x03\xf3\xa5\x06\xb4\xe0\x8c\x5a\x8c\x46\x01\x42\x16\x04\x30\xa7\xcc\x5e\xfc\xd2\xeb\xfb\x40\xd7\x20\x1a\x37\x50\xad\x2f\x35\x72\x50\x6a\x41\x1d\x1c\x6a\x5b\xe3\xf9\x25\x3e\xc0\x5c\x05\x42\xe8\x38\xdc\xfb\xf9\x83\x7a\xc9\x2d\xe1\x10\xf2\x77\x94\x4b\x30\x2d\x0b\x5f\x23\x68\xbf\x78\x49\x37\x80\x11\x2d\xa9\x71\x3b\x6a\xa8\x64\x5b\x30\x83\x8e\x0a\x5c\x0f\xa3\xd1\xc7\xb2\x45\x25\xc4\x42\x09\xce\x76\x18\xc5\xe2\x8d\xee\x6c\x93\x07\x59\x9f\xfe\x7c\x9c\x23\x89\x97\x59\x9e\x91\xf4\x89\xa4\xf9\x2a\x7d\x68\xf2\x08\xd5\x54\x54\x80\x51\x4f\x52\x67\xf1\x60\xe0\xb7\x9c\x09\x0e\xd2\xe1\xfe\x7b\xd5\x22\xce\xb2\xef\xf3\x74\xda\xff\xd7\xe7\xc2\x7d\x2e\x6a\x09\x1b\xd9\x9a\xe1\xbf\xc6\xe3\x71\xef\xac\xed\xe3\x2c\x99\xcd\xaf\xf7\xdd\x3a\xa7\xf1\x60\x50\x72\xc9\xd5\x67\xd4\x88\xed\x5d\x1c\x09\xc5\xa8\xc0\xff\x0c\x87\xc3\x4b\x3d\xe2\xc9\x84\x64\x59\xfe\x8d\xfc\xe8\xe8\xd1\xff\xfc\xa6\x7f\x79\xd4\x49\x4a\x96\xd7\x61\x4e\x6f\x3a\x60\xee\xe7\x77\x79\x12\x3f\x92\x6c\x11\x4f\x48\x07\x46\x01\xcf\xb4\x12\xee\xbc\x90\x64\x39\x49\xa6\x8b\xf9\x2c\x59\x5e\x60\xc9\xcb\xa3\x34\xc8\x82\x5b\x67\x54\x08\x47\x2d\xc2\x83\x5f\x6f\xb1\x37\xee\x62\x8f\x64\xf9\x2a\x23\xa9\x1f\xb9\xeb\xc7\x87\x74\xc7\x47\xc9\xc9\x19\x17\x0a\x1b\xe3\x9c\x17\x27\xf3\x29\xc9\x97\x0f\x59\x9e\x92\x7b\x32\x59\xe6\xab\x24\x5e\x2d\xff\x9f\xa7\xb3\x9f\xa4\x0b\x6d\xd8\x0b\x7e\x07\x00\x00\xff\xff\x8c\x09\x09\x80\x82\x07\x00\x00")

func servicesTraining_controllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesTraining_controllerYaml,
		"services/training_controller.yaml",
	)
}

func servicesTraining_controllerYaml() (*asset, error) {
	bytes, err := servicesTraining_controllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/training_controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infra-stack/helm-controller.yaml":                    infraStackHelmControllerYaml,
	"infra-stack/local-path-provisioner.yaml":             infraStackLocalPathProvisionerYaml,
	"infra-stack/namespace.yaml":                          infraStackNamespaceYaml,
	"opni-stack/minio.yaml":                               opniStackMinioYaml,
	"opni-stack/nats.yaml":                                opniStackNatsYaml,
	"opni-stack/opendistro-es.yaml":                       opniStackOpendistroEsYaml,
	"opni-stack/rancher-logging.yaml":                     opniStackRancherLoggingYaml,
	"opni-stack/traefik.yaml":                             opniStackTraefikYaml,
	"services/drain-service.yaml":                         servicesDrainServiceYaml,
	"services/nulog-inference-service-control-plane.yaml": servicesNulogInferenceServiceControlPlaneYaml,
	"services/nulog-inference-service.yaml":               servicesNulogInferenceServiceYaml,
	"services/nvidia-plugin.yaml":                         servicesNvidiaPluginYaml,
	"services/payload-receiver-service.yaml":              servicesPayloadReceiverServiceYaml,
	"services/preprocessing.yaml":                         servicesPreprocessingYaml,
	"services/training_controller.yaml":                   servicesTraining_controllerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infra-stack": &bintree{nil, map[string]*bintree{
		"helm-controller.yaml":        &bintree{infraStackHelmControllerYaml, map[string]*bintree{}},
		"local-path-provisioner.yaml": &bintree{infraStackLocalPathProvisionerYaml, map[string]*bintree{}},
		"namespace.yaml":              &bintree{infraStackNamespaceYaml, map[string]*bintree{}},
	}},
	"opni-stack": &bintree{nil, map[string]*bintree{
		"minio.yaml":           &bintree{opniStackMinioYaml, map[string]*bintree{}},
		"nats.yaml":            &bintree{opniStackNatsYaml, map[string]*bintree{}},
		"opendistro-es.yaml":   &bintree{opniStackOpendistroEsYaml, map[string]*bintree{}},
		"rancher-logging.yaml": &bintree{opniStackRancherLoggingYaml, map[string]*bintree{}},
		"traefik.yaml":         &bintree{opniStackTraefikYaml, map[string]*bintree{}},
	}},
	"services": &bintree{nil, map[string]*bintree{
		"drain-service.yaml":                         &bintree{servicesDrainServiceYaml, map[string]*bintree{}},
		"nulog-inference-service-control-plane.yaml": &bintree{servicesNulogInferenceServiceControlPlaneYaml, map[string]*bintree{}},
		"nulog-inference-service.yaml":               &bintree{servicesNulogInferenceServiceYaml, map[string]*bintree{}},
		"nvidia-plugin.yaml":                         &bintree{servicesNvidiaPluginYaml, map[string]*bintree{}},
		"payload-receiver-service.yaml":              &bintree{servicesPayloadReceiverServiceYaml, map[string]*bintree{}},
		"preprocessing.yaml":                         &bintree{servicesPreprocessingYaml, map[string]*bintree{}},
		"training_controller.yaml":                   &bintree{servicesTraining_controllerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
